{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { w as win } from './index-a5d50daf.js';\nimport { r as raf } from './helpers-be245865.js';\nimport { a as printIonError } from './index-9b0d46f4.js';\n\n/**\r\n * Used to update a scoped component that uses emulated slots. This fires when\r\n * content is passed into the slot or when the content inside of a slot changes.\r\n * This is not needed for components using native slots in the Shadow DOM.\r\n * @internal\r\n * @param el The host element to observe\r\n * @param slotName mutationCallback will fire when nodes on these slot(s) change\r\n * @param mutationCallback The callback to fire whenever the slotted content changes\r\n */\nconst createSlotMutationController = (el, slotName, mutationCallback) => {\n  let hostMutationObserver;\n  let slottedContentMutationObserver;\n  if (win !== undefined && 'MutationObserver' in win) {\n    const slots = Array.isArray(slotName) ? slotName : [slotName];\n    hostMutationObserver = new MutationObserver(entries => {\n      for (const entry of entries) {\n        for (const node of entry.addedNodes) {\n          /**\r\n           * Check to see if the added node\r\n           *  is our slotted content.\r\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && slots.includes(node.slot)) {\n            /**\r\n             * If so, we want to watch the slotted\r\n             * content itself for changes. This lets us\r\n             * detect when content inside of the slot changes.\r\n             */\n            mutationCallback();\n            /**\r\n             * Adding the listener in an raf\r\n             * waits until Stencil moves the slotted element\r\n             * into the correct place in the event that\r\n             * slotted content is being added.\r\n             */\n            raf(() => watchForSlotChange(node));\n            return;\n          }\n        }\n      }\n    });\n    hostMutationObserver.observe(el, {\n      childList: true\n    });\n  }\n  /**\r\n   * Listen for changes inside of the slotted content.\r\n   * We can listen for subtree changes here to be\r\n   * informed of text within the slotted content\r\n   * changing. Doing this on the host is possible\r\n   * but it is much more expensive to do because\r\n   * it also listens for changes to the internals\r\n   * of the component.\r\n   */\n  const watchForSlotChange = slottedEl => {\n    var _a;\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n    slottedContentMutationObserver = new MutationObserver(entries => {\n      mutationCallback();\n      for (const entry of entries) {\n        for (const node of entry.removedNodes) {\n          /**\r\n           * If the element was removed then we\r\n           * need to destroy the MutationObserver\r\n           * so the element can be garbage collected.\r\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            destroySlottedContentObserver();\n          }\n        }\n      }\n    });\n    /**\r\n     * Listen for changes inside of the element\r\n     * as well as anything deep in the tree.\r\n     * We listen on the parentElement so that we can\r\n     * detect when slotted element itself is removed.\r\n     */\n    slottedContentMutationObserver.observe((_a = slottedEl.parentElement) !== null && _a !== void 0 ? _a : slottedEl, {\n      subtree: true,\n      childList: true\n    });\n  };\n  const destroy = () => {\n    if (hostMutationObserver) {\n      hostMutationObserver.disconnect();\n      hostMutationObserver = undefined;\n    }\n    destroySlottedContentObserver();\n  };\n  const destroySlottedContentObserver = () => {\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n  };\n  return {\n    destroy\n  };\n};\nconst getCounterText = (value, maxLength, counterFormatter) => {\n  const valueLength = value == null ? 0 : value.toString().length;\n  const defaultCounterText = defaultCounterFormatter(valueLength, maxLength);\n  /**\r\n   * If developers did not pass a custom formatter,\r\n   * use the default one.\r\n   */\n  if (counterFormatter === undefined) {\n    return defaultCounterText;\n  }\n  /**\r\n   * Otherwise, try to use the custom formatter\r\n   * and fallback to the default formatter if\r\n   * there was an error.\r\n   */\n  try {\n    return counterFormatter(valueLength, maxLength);\n  } catch (e) {\n    printIonError('Exception in provided `counterFormatter`.', e);\n    return defaultCounterText;\n  }\n};\nconst defaultCounterFormatter = (length, maxlength) => {\n  return `${length} / ${maxlength}`;\n};\nexport { createSlotMutationController as c, getCounterText as g };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}