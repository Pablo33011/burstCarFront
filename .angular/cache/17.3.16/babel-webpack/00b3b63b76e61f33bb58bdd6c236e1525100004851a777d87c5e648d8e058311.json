{"ast":null,"code":"// index.js\nimport rbush from \"rbush\";\nimport { featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\nfunction geojsonRbush(maxEntries) {\n  var tree = new rbush(maxEntries);\n  tree.insert = function (feature) {\n    if (feature.type !== \"Feature\") throw new Error(\"invalid feature\");\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.insert.call(this, feature);\n  };\n  tree.load = function (features) {\n    var load = [];\n    if (Array.isArray(features)) {\n      features.forEach(function (feature) {\n        if (feature.type !== \"Feature\") throw new Error(\"invalid features\");\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    } else {\n      featureEach(features, function (feature) {\n        if (feature.type !== \"Feature\") throw new Error(\"invalid features\");\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    }\n    return rbush.prototype.load.call(this, load);\n  };\n  tree.remove = function (feature, equals) {\n    if (feature.type !== \"Feature\") throw new Error(\"invalid feature\");\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.remove.call(this, feature, equals);\n  };\n  tree.clear = function () {\n    return rbush.prototype.clear.call(this);\n  };\n  tree.search = function (geojson) {\n    var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n    return featureCollection(features);\n  };\n  tree.collides = function (geojson) {\n    return rbush.prototype.collides.call(this, this.toBBox(geojson));\n  };\n  tree.all = function () {\n    var features = rbush.prototype.all.call(this);\n    return featureCollection(features);\n  };\n  tree.toJSON = function () {\n    return rbush.prototype.toJSON.call(this);\n  };\n  tree.fromJSON = function (json) {\n    return rbush.prototype.fromJSON.call(this, json);\n  };\n  tree.toBBox = function (geojson) {\n    var bbox;\n    if (geojson.bbox) bbox = geojson.bbox;else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];else if (geojson.type === \"Feature\") bbox = turfBBox(geojson);else if (geojson.type === \"FeatureCollection\") bbox = turfBBox(geojson);else throw new Error(\"invalid geojson\");\n    return {\n      minX: bbox[0],\n      minY: bbox[1],\n      maxX: bbox[2],\n      maxY: bbox[3]\n    };\n  };\n  return tree;\n}\nvar turf_geojson_rbush_default = geojsonRbush;\nexport { turf_geojson_rbush_default as default, geojsonRbush };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}