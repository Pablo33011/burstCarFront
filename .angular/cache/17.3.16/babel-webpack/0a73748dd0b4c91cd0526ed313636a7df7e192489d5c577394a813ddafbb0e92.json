{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/santiago.cardenas/Desktop/Proyectos/Proyecto de grado/BurstCar/front/burstCarFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { w as win, d as doc } from './index-a5d50daf.js';\nimport { g as getScrollElement, c as scrollByPoint, f as findClosestIonContent } from './index-f3946ac1.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers-be245865.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard-73175e24.js';\nimport './index-9b0d46f4.js';\nimport './capacitor-59395cbd.js';\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  } else {\n    removeClone(componentEl, inputEl);\n  }\n};\nconst isFocused = input => {\n  /**\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\r\n   * Calling getRootNode on an element in standard web page will return HTMLDocument.\r\n   * Calling getRootNode on an element inside of the Shadow DOM will return the associated ShadowRoot.\r\n   * Calling getRootNode on an element that is not attached to a document/shadow tree will return\r\n   * the root of the DOM tree it belongs to.\r\n   * isFocused is used for the hide-caret utility which only considers input/textarea elements\r\n   * that are present in the DOM, so we don't set types for that final case since it does not apply.\r\n   */\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\r\n   * Making the cloned input disabled prevents\r\n   * Chrome for Android from still scrolling\r\n   * the entire page since this cloned input\r\n   * will briefly be hidden by the keyboard\r\n   * even though it is not focused.\r\n   *\r\n   * This is not needed on iOS. While this\r\n   * does not cause functional issues on iOS,\r\n   * the input still appears slightly dimmed even\r\n   * if we set opacity: 1.\r\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\r\n * Factoring in 50px gives us some room\r\n * in case the keyboard shows password/autofill bars\r\n * asynchronously.\r\n */\nconst SCROLL_AMOUNT_PADDING = 50;\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = shouldHideCaret => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = ev => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight, platformHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, platformHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\r\n * Scroll padding adds additional padding to the bottom\r\n * of ion-content so that there is enough scroll space\r\n * for an input to be scrolled above the keyboard. This\r\n * is needed in environments where the webview does not\r\n * resize when the keyboard opens.\r\n *\r\n * Example: If an input at the bottom of ion-content is\r\n * focused, there is no additional scrolling space below\r\n * it, so the input cannot be scrolled above the keyboard.\r\n * Scroll padding fixes this by adding padding equal to the\r\n * height of the keyboard to the bottom of the content.\r\n *\r\n * Common environments where this is needed:\r\n * - Mobile Safari: The keyboard overlays the content\r\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\r\n * when the KeyboardResize mode is set to 'none'.\r\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  } else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\r\n * When an input is about to be focused,\r\n * set a timeout to clear any scroll padding\r\n * on the content. Note: The clearing\r\n * is done on a timeout so that if users\r\n * are moving focus from one input to the next\r\n * then re-adding scroll padding to the new\r\n * input with cancel the timeout to clear the\r\n * scroll padding.\r\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, {\n    once: true\n  });\n};\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\r\n   * Scroll padding should only be added if:\r\n   * 1. The global scrollPadding config option\r\n   * is set to true.\r\n   * 2. The native keyboard resize mode is either \"none\"\r\n   * (keyboard overlays webview) or undefined (resize\r\n   * information unavailable)\r\n   * Resize info is available on Capacitor 4+\r\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\r\n   * This tracks whether or not the keyboard has been\r\n   * presented for a single focused text field. Note\r\n   * that it does not track if the keyboard is open\r\n   * in general such as if the keyboard is open for\r\n   * a different focused text field.\r\n   */\n  let hasKeyboardBeenPresentedForTextField = false;\n  /**\r\n   * When adding scroll padding we need to know\r\n   * how much of the viewport the keyboard obscures.\r\n   * We do this by subtracting the keyboard height\r\n   * from the platform height.\r\n   *\r\n   * If we compute this value when switching between\r\n   * inputs then the webview may already be resized.\r\n   * At this point, `win.innerHeight` has already accounted\r\n   * for the keyboard meaning we would then subtract\r\n   * the keyboard height again. This will result in the input\r\n   * being scrolled more than it needs to.\r\n   */\n  const platformHeight = win !== undefined ? win.innerHeight : 0;\n  /**\r\n   * Scroll assist is run when a text field\r\n   * is focused. However, it may need to\r\n   * re-run when the keyboard size changes\r\n   * such that the text field is now hidden\r\n   * underneath the keyboard.\r\n   * This function re-runs scroll assist\r\n   * when that happens.\r\n   *\r\n   * One limitation of this is on a web browser\r\n   * where native keyboard APIs do not have cross-browser\r\n   * support. `ionKeyboardDidShow` relies on the Visual Viewport API.\r\n   * This means that if the keyboard changes but does not change\r\n   * geometry, then scroll assist will not re-run even if\r\n   * the user has scrolled the text field under the keyboard.\r\n   * This is not a problem when running in Cordova/Capacitor\r\n   * because `ionKeyboardDidShow` uses the native events\r\n   * which fire every time the keyboard changes.\r\n   */\n  const keyboardShow = ev => {\n    /**\r\n     * If the keyboard has not yet been presented\r\n     * for this text field then the text field has just\r\n     * received focus. In that case, the focusin listener\r\n     * will run scroll assist.\r\n     */\n    if (hasKeyboardBeenPresentedForTextField === false) {\n      hasKeyboardBeenPresentedForTextField = true;\n      return;\n    }\n    /**\r\n     * Otherwise, the keyboard has already been presented\r\n     * for the focused text field.\r\n     * This means that the keyboard likely changed\r\n     * geometry, and we need to re-run scroll assist.\r\n     * This can happen when the user rotates their device\r\n     * or when they switch keyboards.\r\n     *\r\n     * Make sure we pass in the computed keyboard height\r\n     * rather than the estimated keyboard height.\r\n     *\r\n     * Since the keyboard is already open then we do not\r\n     * need to wait for the webview to resize, so we pass\r\n     * \"waitForResize: false\".\r\n     */\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, ev.detail.keyboardHeight, addScrollPadding, disableClonedInput, platformHeight, false);\n  };\n  /**\r\n   * Reset the internal state when the text field loses focus.\r\n   */\n  const focusOut = () => {\n    hasKeyboardBeenPresentedForTextField = false;\n    win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.removeEventListener('focusout', focusOut);\n  };\n  /**\r\n   * When the input is about to receive\r\n   * focus, we need to move it to prevent\r\n   * mobile Safari from adjusting the viewport.\r\n   */\n  const focusIn = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      /**\r\n       * Scroll assist should not run again\r\n       * on inputs that have been manually\r\n       * focused inside of the scroll assist\r\n       * implementation.\r\n       */\n      if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n        inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n        return;\n      }\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput, platformHeight);\n      win === null || win === void 0 ? void 0 : win.addEventListener('ionKeyboardDidShow', keyboardShow);\n      componentEl.addEventListener('focusout', focusOut);\n    });\n    return function focusIn() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  componentEl.addEventListener('focusin', focusIn);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.removeEventListener('focusout', focusOut);\n  };\n};\n/**\r\n * Use this function when you want to manually\r\n * focus an input but not have scroll assist run again.\r\n */\nconst setManualFocus = el => {\n  /**\r\n   * If element is already focused then\r\n   * a new focusin event will not be dispatched\r\n   * to remove the SKIL_SCROLL_ASSIST attribute.\r\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false, platformHeight = 0, waitForResize = true) {\n    if (!contentEl && !footerEl) {\n      return;\n    }\n    const scrollData = getScrollData(componentEl, contentEl || footerEl, keyboardHeight, platformHeight);\n    if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n      // the text input is in a safe position that doesn't\n      // require it to be scrolled into view, just set focus now\n      setManualFocus(inputEl);\n      /**\r\n       * Even though the input does not need\r\n       * scroll assist, we should preserve the\r\n       * the scroll padding as users could be moving\r\n       * focus from an input that needs scroll padding\r\n       * to an input that does not need scroll padding.\r\n       * If we remove the scroll padding now, users will\r\n       * see the page jump.\r\n       */\n      if (enableScrollPadding && contentEl !== null) {\n        setScrollPadding(contentEl, currentPadding);\n        setClearScrollPaddingListener(inputEl, contentEl, () => currentPadding = 0);\n      }\n      return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n    setManualFocus(inputEl);\n    /**\r\n     * Relocating/Focusing input causes the\r\n     * click event to be cancelled, so\r\n     * manually fire one here.\r\n     */\n    raf(() => componentEl.click());\n    /**\r\n     * If enabled, we can add scroll padding to\r\n     * the bottom of the content so that scroll assist\r\n     * has enough room to scroll the input above\r\n     * the keyboard.\r\n     */\n    if (enableScrollPadding && contentEl) {\n      currentPadding = scrollData.scrollPadding;\n      setScrollPadding(contentEl, currentPadding);\n    }\n    if (typeof window !== 'undefined') {\n      let scrollContentTimeout;\n      const _scrollContent = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* () {\n          // clean up listeners and timeouts\n          if (scrollContentTimeout !== undefined) {\n            clearTimeout(scrollContentTimeout);\n          }\n          window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n          window.removeEventListener('ionKeyboardDidShow', _scrollContent);\n          // scroll the input into place\n          if (contentEl) {\n            yield scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n          }\n          // the scroll view is in the correct position now\n          // give the native text input focus\n          relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n          // ensure this is the focused input\n          setManualFocus(inputEl);\n          /**\r\n           * When the input is about to be blurred\r\n           * we should set a timeout to remove\r\n           * any scroll padding.\r\n           */\n          if (enableScrollPadding) {\n            setClearScrollPaddingListener(inputEl, contentEl, () => currentPadding = 0);\n          }\n        });\n        return function scrollContent() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n      const doubleKeyboardEventListener = () => {\n        window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        window.addEventListener('ionKeyboardDidShow', _scrollContent);\n      };\n      if (contentEl) {\n        const scrollEl = yield getScrollElement(contentEl);\n        /**\r\n         * scrollData will only consider the amount we need\r\n         * to scroll in order to properly bring the input\r\n         * into view. It will not consider the amount\r\n         * we can scroll in the content element.\r\n         * As a result, scrollData may request a greater\r\n         * scroll position than is currently available\r\n         * in the DOM. If this is the case, we need to\r\n         * wait for the webview to resize/the keyboard\r\n         * to show in order for additional scroll\r\n         * bandwidth to become available.\r\n         */\n        const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n        if (waitForResize && scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n          /**\r\n           * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\r\n           * after the initial keyboard is shown. This prevents the webview from resizing\r\n           * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\r\n           */\n          if (inputEl.type === 'password') {\n            // Add 50px to account for the \"Passwords\" bar\n            scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n            window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n          } else {\n            window.addEventListener('ionKeyboardDidShow', _scrollContent);\n          }\n          /**\r\n           * This should only fire in 2 instances:\r\n           * 1. The app is very slow.\r\n           * 2. The app is running in a browser on an old OS\r\n           * that does not support Ionic Keyboard Events\r\n           */\n          scrollContentTimeout = setTimeout(_scrollContent, 1000);\n          return;\n        }\n      }\n      _scrollContent();\n    }\n  });\n  return function jsSetFocus(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst INPUT_BLURRING = true;\nconst startInputShims = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (config, platform) {\n    /**\r\n     * If doc is undefined then we are in an SSR environment\r\n     * where input shims do not apply.\r\n     */\n    if (doc === undefined) {\n      return;\n    }\n    const isIOS = platform === 'ios';\n    const isAndroid = platform === 'android';\n    /**\r\n     * Hide Caret and Input Blurring are needed on iOS.\r\n     * Scroll Assist and Scroll Padding are needed on iOS and Android\r\n     * with Chrome web browser (not Chrome webview).\r\n     */\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\n    const scrollAssist = config.getBoolean('scrollAssist', true);\n    const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n    const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n    const scrollPadding = config.getBoolean('scrollPadding', true);\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    const hideCaretMap = new WeakMap();\n    const scrollAssistMap = new WeakMap();\n    /**\r\n     * Grab the native keyboard resize configuration\r\n     * and pass it to scroll assist. Scroll assist requires\r\n     * that we adjust the input right before the input\r\n     * is about to be focused. If we called `Keyboard.getResizeMode`\r\n     * on focusin in scroll assist, we could potentially adjust the\r\n     * input too late since this call is async.\r\n     */\n    const keyboardResizeMode = yield Keyboard.getResizeMode();\n    const registerInput = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (componentEl) {\n        yield new Promise(resolve => componentOnReady(componentEl, resolve));\n        const inputRoot = componentEl.shadowRoot || componentEl;\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n        const scrollEl = findClosestIonContent(componentEl);\n        const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n        if (!inputEl) {\n          return;\n        }\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n          const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n          hideCaretMap.set(componentEl, rmFn);\n        }\n        /**\r\n         * date/datetime-locale inputs on mobile devices show date picker\r\n         * overlays instead of keyboards. As a result, scroll assist is\r\n         * not needed. This also works around a bug in iOS <16 where\r\n         * scroll assist causes the browser to lock up. See FW-1997.\r\n         */\n        const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n        if (!isDateInput && (!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n          const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n          scrollAssistMap.set(componentEl, rmFn);\n        }\n      });\n      return function registerInput(_x9) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    const unregisterInput = componentEl => {\n      if (hideCaret) {\n        const fn = hideCaretMap.get(componentEl);\n        if (fn) {\n          fn();\n        }\n        hideCaretMap.delete(componentEl);\n      }\n      if (scrollAssist) {\n        const fn = scrollAssistMap.get(componentEl);\n        if (fn) {\n          fn();\n        }\n        scrollAssistMap.delete(componentEl);\n      }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n      enableInputBlurring();\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (const input of inputs) {\n      registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', ev => {\n      registerInput(ev.detail);\n    });\n    doc.addEventListener('ionInputDidUnload', ev => {\n      unregisterInput(ev.detail);\n    });\n  });\n  return function startInputShims(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport { startInputShims };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}