{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/santiago.cardenas/Desktop/Proyectos/Proyecto de grado/BurstCar/front/burstCarFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistroServicioPage = class RegistroServicioPage {\n  constructor(fb, servicioServicio, router, storageServicio) {\n    this.fb = fb;\n    this.servicioServicio = servicioServicio;\n    this.router = router;\n    this.storageServicio = storageServicio;\n    this.pasoActual = 1;\n    this.numeroIdentificacion = '';\n    this.servicioForm = this.fb.group({\n      descripcion: ['', Validators.required],\n      identificaionSolicitante: ['', Validators.required],\n      tipoServicio: ['', Validators.required],\n      costoInicial: ['', Validators.required],\n      moneda: ['', Validators.required],\n      UbicacionOrigenServicio: this.fb.group({\n        numeroVia: ['', Validators.required],\n        direccion: ['', Validators.required],\n        latitud: ['', Validators.required],\n        longitud: ['', Validators.required],\n        detalleAdicional: [''],\n        nombrePais: ['', Validators.required],\n        nombreDepartamento: ['', Validators.required],\n        nombreCiudad: ['', Validators.required],\n        nombreCorregimiento: [''],\n        nombreVia: ['', Validators.required]\n      }),\n      destinatario: this.fb.group({\n        nombreDestinatario: ['', Validators.required],\n        numeroIdentificacion: ['', Validators.required]\n      }),\n      destinoUbicacion: this.fb.group({\n        numeroVia: ['', Validators.required],\n        direccion: ['', Validators.required],\n        latitud: ['', Validators.required],\n        longitud: ['', Validators.required],\n        detalleAdicional: [''],\n        nombrePais: ['', Validators.required],\n        nombreDepartamento: ['', Validators.required],\n        nombreCiudad: ['', Validators.required],\n        nombreCorregimiento: [''],\n        nombreVia: ['', Validators.required]\n      })\n    });\n  }\n  ngOnInit() {\n    this.obtenerIdentificacion();\n  }\n  obtenerIdentificacion() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const token = yield _this.storageServicio.obtener('token');\n      console.log('Token obtenido:', token);\n      if (token) {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        _this.servicioForm.patchValue({\n          identificaionSolicitante: _this.numeroIdentificacion\n        });\n      }\n    })();\n  }\n  registrar() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const datos = _this2.servicioForm.value;\n      try {\n        const ubicacionOrigenRes = yield _this2.servicioServicio.registrarUbicacion(datos.origen).toPromise();\n        const idUbicacionOrigen = ubicacionOrigenRes;\n        const ubicacionDestinoRes = yield _this2.servicioServicio.registrarUbicacion(datos.destinoUbicacion).toPromise();\n        const idUbicacionDestino = ubicacionDestinoRes;\n        const destinoRes = yield _this2.servicioServicio.registrarDestino({\n          nombreDestinatario: datos.destinatario.nombreDestinatario,\n          numeroIdentificacion: datos.destinatario.numeroIdentificacion,\n          ubicacion: idUbicacionDestino\n        }).toPromise();\n        const idDestino = destinoRes;\n        const servicioRes = yield _this2.servicioServicio.registrarServicio({\n          descripcion: datos.descripcion,\n          identificaionSolicitante: datos.identificaionSolicitante,\n          tipoServicio: datos.tipoServicio,\n          estadoServicio: 'Borrador',\n          ubicacion: idUbicacionOrigen,\n          destino: idDestino,\n          costoInicial: datos.costoInicial,\n          moneda: datos.moneda\n        }).toPromise();\n        console.log('Servicio registrado con ID:', servicioRes);\n        _this2.router.navigateByUrl('/servicio/todos');\n      } catch (error) {\n        console.error('Error al registrar servicio:', error);\n      }\n    })();\n  }\n};\nRegistroServicioPage = __decorate([Component({\n  selector: 'app-servicio-regsistro',\n  templateUrl: './servicio-registro.page.html',\n  styleUrls: ['./servicio-registro.page.scss']\n})], RegistroServicioPage);\nexport { RegistroServicioPage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}