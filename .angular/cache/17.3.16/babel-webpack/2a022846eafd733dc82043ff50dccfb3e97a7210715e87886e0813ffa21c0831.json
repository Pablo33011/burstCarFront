{"ast":null,"code":"// index.ts\nimport { featureCollection, isObject, multiPolygon } from \"@turf/helpers\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { featureEach } from \"@turf/meta\";\nimport { flatten } from \"@turf/flatten\";\nimport * as polyclip from \"polyclip-ts\";\nfunction dissolve(fc, options = {}) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const {\n    propertyName\n  } = options;\n  collectionOf(fc, \"Polygon\", \"dissolve\");\n  const outFeatures = [];\n  if (!propertyName) {\n    return flatten(multiPolygon(polyclip.union.apply(null,\n    // List of polygons expressed as Position[][][] a.k.a. Geom[]\n    fc.features.map(function (f) {\n      return f.geometry.coordinates;\n    }))));\n  } else {\n    const uniquePropertyVals = {};\n    featureEach(fc, function (feature) {\n      if (feature.properties) {\n        if (!Object.prototype.hasOwnProperty.call(uniquePropertyVals, feature.properties[propertyName])) {\n          uniquePropertyVals[feature.properties[propertyName]] = [];\n        }\n        uniquePropertyVals[feature.properties[propertyName]].push(feature);\n      }\n    });\n    const vals = Object.keys(uniquePropertyVals);\n    for (let i = 0; i < vals.length; i++) {\n      const mp = multiPolygon(polyclip.union.apply(null,\n      // List of polygons expressed as Position[][][] a.k.a. Geom[]\n      uniquePropertyVals[vals[i]].map(function (f) {\n        return f.geometry.coordinates;\n      })));\n      if (mp && mp.properties) {\n        mp.properties[propertyName] = vals[i];\n        outFeatures.push(mp);\n      }\n    }\n  }\n  return flatten(featureCollection(outFeatures));\n}\nvar turf_dissolve_default = dissolve;\nexport { turf_dissolve_default as default, dissolve };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}