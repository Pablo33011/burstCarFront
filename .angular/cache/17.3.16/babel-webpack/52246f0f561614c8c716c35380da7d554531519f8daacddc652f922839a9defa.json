{"ast":null,"code":"// index.js\nimport { length } from \"@turf/length\";\nimport { lineSliceAlong } from \"@turf/line-slice-along\";\nimport { flattenEach } from \"@turf/meta\";\nimport { featureCollection, isObject } from \"@turf/helpers\";\nfunction lineChunk(geojson, segmentLength, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var units = options.units;\n  var reverse = options.reverse;\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (segmentLength <= 0) throw new Error(\"segmentLength must be greater than 0\");\n  var results = [];\n  flattenEach(geojson, function (feature) {\n    if (reverse) feature.geometry.coordinates = feature.geometry.coordinates.reverse();\n    sliceLineSegments(feature, segmentLength, units, function (segment) {\n      results.push(segment);\n    });\n  });\n  return featureCollection(results);\n}\nfunction sliceLineSegments(line, segmentLength, units, callback) {\n  var lineLength = length(line, {\n    units\n  });\n  if (lineLength <= segmentLength) return callback(line);\n  var numberOfSegments = lineLength / segmentLength;\n  if (!Number.isInteger(numberOfSegments)) {\n    numberOfSegments = Math.floor(numberOfSegments) + 1;\n  }\n  for (var i = 0; i < numberOfSegments; i++) {\n    var outline = lineSliceAlong(line, segmentLength * i, segmentLength * (i + 1), {\n      units\n    });\n    callback(outline, i);\n  }\n}\nvar turf_line_chunk_default = lineChunk;\nexport { turf_line_chunk_default as default, lineChunk };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}