{"ast":null,"code":"// index.ts\nimport { circle } from \"@turf/circle\";\nimport { lineArc } from \"@turf/line-arc\";\nimport { coordEach } from \"@turf/meta\";\nimport { isObject, polygon } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nfunction sector(center, radius, bearing1, bearing2, options = {}) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const properties = options.properties;\n  if (!center) throw new Error(\"center is required\");\n  if (bearing1 === void 0 || bearing1 === null) throw new Error(\"bearing1 is required\");\n  if (bearing2 === void 0 || bearing2 === null) throw new Error(\"bearing2 is required\");\n  if (!radius) throw new Error(\"radius is required\");\n  if (typeof options !== \"object\") throw new Error(\"options must be an object\");\n  if (convertAngleTo360(bearing1) === convertAngleTo360(bearing2)) {\n    return circle(center, radius, options);\n  }\n  const coords = getCoords(center);\n  const arc = lineArc(center, radius, bearing1, bearing2, options);\n  const sliceCoords = [[coords]];\n  coordEach(arc, function (currentCoords) {\n    sliceCoords[0].push(currentCoords);\n  });\n  sliceCoords[0].push(coords);\n  return polygon(sliceCoords, properties);\n}\nfunction convertAngleTo360(alpha) {\n  let beta = alpha % 360;\n  if (beta < 0) {\n    beta += 360;\n  }\n  return beta;\n}\nvar turf_sector_default = sector;\nexport { turf_sector_default as default, sector };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}