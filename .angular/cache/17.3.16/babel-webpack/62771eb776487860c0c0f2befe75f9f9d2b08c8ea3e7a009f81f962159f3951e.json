{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/santiago.cardenas/Desktop/Proyectos/Proyecto de grado/BurstCar/front/burstCarFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction s(t) {\n  t.CapacitorUtils.Synapse = new Proxy({}, {\n    get(e, o) {\n      return new Proxy({}, {\n        get(w, r) {\n          return (c, p, n) => {\n            const i = t.Capacitor.Plugins[o];\n            if (i === void 0) {\n              n(new Error(`Capacitor plugin ${o} not found`));\n              return;\n            }\n            if (typeof i[r] != \"function\") {\n              n(new Error(`Method ${r} not found in Capacitor plugin ${o}`));\n              return;\n            }\n            _asyncToGenerator(function* () {\n              try {\n                const a = yield i[r](c);\n                p(a);\n              } catch (a) {\n                n(a);\n              }\n            })();\n          };\n        }\n      });\n    }\n  });\n}\nfunction u(t) {\n  t.CapacitorUtils.Synapse = new Proxy({}, {\n    get(e, o) {\n      return t.cordova.plugins[o];\n    }\n  });\n}\nfunction y(t = !1) {\n  window.CapacitorUtils = window.CapacitorUtils || {}, window.Capacitor !== void 0 && !t ? s(window) : window.cordova !== void 0 && u(window);\n}\nexport { y as exposeSynapse };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}