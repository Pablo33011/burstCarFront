{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { g as getCapacitor } from './capacitor-59395cbd.js';\nvar ImpactStyle = /*#__PURE__*/function (ImpactStyle) {\n  /**\r\n   * A collision between large, heavy user interface elements\r\n   *\r\n   * @since 1.0.0\r\n   */\n  ImpactStyle[\"Heavy\"] = \"HEAVY\";\n  /**\r\n   * A collision between moderately sized user interface elements\r\n   *\r\n   * @since 1.0.0\r\n   */\n  ImpactStyle[\"Medium\"] = \"MEDIUM\";\n  /**\r\n   * A collision between small, light user interface elements\r\n   *\r\n   * @since 1.0.0\r\n   */\n  ImpactStyle[\"Light\"] = \"LIGHT\";\n  return ImpactStyle;\n}(ImpactStyle || {});\nvar NotificationType = /*#__PURE__*/function (NotificationType) {\n  /**\r\n   * A notification feedback type indicating that a task has completed successfully\r\n   *\r\n   * @since 1.0.0\r\n   */\n  NotificationType[\"Success\"] = \"SUCCESS\";\n  /**\r\n   * A notification feedback type indicating that a task has produced a warning\r\n   *\r\n   * @since 1.0.0\r\n   */\n  NotificationType[\"Warning\"] = \"WARNING\";\n  /**\r\n   * A notification feedback type indicating that a task has failed\r\n   *\r\n   * @since 1.0.0\r\n   */\n  NotificationType[\"Error\"] = \"ERROR\";\n  return NotificationType;\n}(NotificationType || {});\nconst HapticEngine = {\n  getEngine() {\n    const tapticEngine = window.TapticEngine;\n    if (tapticEngine) {\n      // Cordova\n      // TODO FW-4707 - Remove this in Ionic 8\n      return tapticEngine;\n    }\n    const capacitor = getCapacitor();\n    if (capacitor === null || capacitor === void 0 ? void 0 : capacitor.isPluginAvailable('Haptics')) {\n      // Capacitor\n      return capacitor.Plugins.Haptics;\n    }\n    return undefined;\n  },\n  available() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return false;\n    }\n    const capacitor = getCapacitor();\n    /**\r\n     * Developers can manually import the\r\n     * Haptics plugin in their app which will cause\r\n     * getEngine to return the Haptics engine. However,\r\n     * the Haptics engine will throw an error if\r\n     * used in a web browser that does not support\r\n     * the Vibrate API. This check avoids that error\r\n     * if the browser does not support the Vibrate API.\r\n     */\n    if ((capacitor === null || capacitor === void 0 ? void 0 : capacitor.getPlatform()) === 'web') {\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\n    }\n    return true;\n  },\n  isCordova() {\n    return window.TapticEngine !== undefined;\n  },\n  isCapacitor() {\n    return getCapacitor() !== undefined;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    /**\r\n     * To provide backwards compatibility with Cordova apps,\r\n     * we convert the style to lowercase.\r\n     *\r\n     * TODO: FW-4707 - Remove this in Ionic 8\r\n     */\n    const style = this.isCapacitor() ? options.style : options.style.toLowerCase();\n    engine.impact({\n      style\n    });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    /**\r\n     * To provide backwards compatibility with Cordova apps,\r\n     * we convert the style to lowercase.\r\n     *\r\n     * TODO: FW-4707 - Remove this in Ionic 8\r\n     */\n    const type = this.isCapacitor() ? options.type : options.type.toLowerCase();\n    engine.notification({\n      type\n    });\n  },\n  selection() {\n    /**\r\n     * To provide backwards compatibility with Cordova apps,\r\n     * we convert the style to lowercase.\r\n     *\r\n     * TODO: FW-4707 - Remove this in Ionic 8\r\n     */\n    const style = this.isCapacitor() ? ImpactStyle.Light : 'light';\n    this.impact({\n      style\n    });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\r\n * Check to see if the Haptic Plugin is available\r\n * @return Returns `true` or false if the plugin is available\r\n */\nconst hapticAvailable = () => {\n  return HapticEngine.available();\n};\n/**\r\n * Trigger a selection changed haptic event. Good for one-time events\r\n * (not for gestures)\r\n */\nconst hapticSelection = () => {\n  hapticAvailable() && HapticEngine.selection();\n};\n/**\r\n * Tell the haptic engine that a gesture for a selection change is starting.\r\n */\nconst hapticSelectionStart = () => {\n  hapticAvailable() && HapticEngine.selectionStart();\n};\n/**\r\n * Tell the haptic engine that a selection changed during a gesture.\r\n */\nconst hapticSelectionChanged = () => {\n  hapticAvailable() && HapticEngine.selectionChanged();\n};\n/**\r\n * Tell the haptic engine we are done with a gesture. This needs to be\r\n * called lest resources are not properly recycled.\r\n */\nconst hapticSelectionEnd = () => {\n  hapticAvailable() && HapticEngine.selectionEnd();\n};\n/**\r\n * Use this to indicate success/failure/warning to the user.\r\n * options should be of the type `{ style: ImpactStyle.LIGHT }` (or `MEDIUM`/`HEAVY`)\r\n */\nconst hapticImpact = options => {\n  hapticAvailable() && HapticEngine.impact(options);\n};\nexport { ImpactStyle as I, hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}