{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/santiago.cardenas/Desktop/Proyectos/Proyecto de grado/BurstCar/front/burstCarFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { r as registerInstance, d as createEvent, w as writeTask, h, H as Host, f as getElement } from './index-a1a47f01.js';\nimport { f as findClosestIonContent, i as isIonContent, d as disableContentScrollY, r as resetContentScrollY, a as findIonContent, p as printIonContentErrorMsg } from './index-f3946ac1.js';\nimport { C as CoreDelegate, a as attachComponent, d as detachComponent } from './framework-delegate-ed4ba327.js';\nimport { g as getElementRoot, l as clamp, r as raf, k as inheritAttributes, m as hasLazyBuild } from './helpers-be245865.js';\nimport { c as createLockController } from './lock-controller-316928be.js';\nimport { p as printIonWarning } from './index-9b0d46f4.js';\nimport { g as getCapacitor } from './capacitor-59395cbd.js';\nimport { G as GESTURE, O as OVERLAY_GESTURE_PRIORITY, e as createTriggerController, B as BACKDROP, j as prepareOverlay, k as setOverlayId, f as present, g as dismiss, h as eventMethod } from './overlays-b874c3c3.js';\nimport { g as getClassMap } from './theme-01f3f29c.js';\nimport { e as deepReady, w as waitForMount } from './index-fae1515c.js';\nimport { b as getIonMode, c as config } from './ionic-global-94f25d1b.js';\nimport { KEYBOARD_DID_OPEN } from './keyboard-52278bd7.js';\nimport { c as createAnimation } from './animation-6a0c5338.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-fe2083dc.js';\nimport { createGesture } from './index-2cf77112.js';\nimport { w as win } from './index-a5d50daf.js';\nimport './hardware-back-button-6107a37c.js';\nimport './keyboard-73175e24.js';\nimport './gesture-controller-1bf57181.js';\nvar Style = /*#__PURE__*/function (Style) {\n  Style[\"Dark\"] = \"DARK\";\n  Style[\"Light\"] = \"LIGHT\";\n  Style[\"Default\"] = \"DEFAULT\";\n  return Style;\n}(Style || {});\nconst StatusBar = {\n  getEngine() {\n    const capacitor = getCapacitor();\n    if (capacitor === null || capacitor === void 0 ? void 0 : capacitor.isPluginAvailable('StatusBar')) {\n      return capacitor.Plugins.StatusBar;\n    }\n    return undefined;\n  },\n  // TODO FW-4696 Remove supportDefaultStatusBarStyle in Ionic v8\n  supportsDefaultStatusBarStyle() {\n    const capacitor = getCapacitor();\n    /**\r\n     * The 'DEFAULT' status bar style was added\r\n     * to the @capacitor/status-bar plugin in Capacitor 3.\r\n     * PluginHeaders is only supported in Capacitor 3+,\r\n     * so we can use this to detect Capacitor 3.\r\n     */\n    return !!(capacitor === null || capacitor === void 0 ? void 0 : capacitor.PluginHeaders);\n  },\n  setStyle(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    engine.setStyle(options);\n  },\n  getStyle: function () {\n    var _ref = _asyncToGenerator(function* () {\n      const engine = this.getEngine();\n      if (!engine) {\n        return Style.Default;\n      }\n      const {\n        style\n      } = yield engine.getInfo();\n      return style;\n    });\n    return function getStyle() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n};\n\n/**\r\n * Use y = mx + b to\r\n * figure out the backdrop value\r\n * at a particular x coordinate. This\r\n * is useful when the backdrop does\r\n * not begin to fade in until after\r\n * the 0 breakpoint.\r\n */\nconst getBackdropValueForSheet = (x, backdropBreakpoint) => {\n  /**\r\n   * We will use these points:\r\n   * (backdropBreakpoint, 0)\r\n   * (maxBreakpoint, 1)\r\n   * We know that at the beginning breakpoint,\r\n   * the backdrop will be hidden. We also\r\n   * know that at the maxBreakpoint, the backdrop\r\n   * must be fully visible. maxBreakpoint should\r\n   * always be 1 even if the maximum value\r\n   * of the breakpoints array is not 1 since\r\n   * the animation runs from a progress of 0\r\n   * to a progress of 1.\r\n   * m = (y2 - y1) / (x2 - x1)\r\n   *\r\n   * This is simplified from:\r\n   * m = (1 - 0) / (maxBreakpoint - backdropBreakpoint)\r\n   *\r\n   * If the backdropBreakpoint is 1, we return 0 as the\r\n   * backdrop is completely hidden.\r\n   *\r\n   */\n  if (backdropBreakpoint === 1) {\n    return 0;\n  }\n  const slope = 1 / (1 - backdropBreakpoint);\n  /**\r\n   * From here, compute b which is\r\n   * the backdrop opacity if the offset\r\n   * is 0. If the backdrop does not\r\n   * begin to fade in until after the\r\n   * 0 breakpoint, this b value will be\r\n   * negative. This is fine as we never pass\r\n   * b directly into the animation keyframes.\r\n   * b = y - mx\r\n   * Use a known point: (backdropBreakpoint, 0)\r\n   * This is simplified from:\r\n   * b = 0 - (backdropBreakpoint * slope)\r\n   */\n  const b = -(backdropBreakpoint * slope);\n  /**\r\n   * Finally, we can now determine the\r\n   * backdrop offset given an arbitrary\r\n   * gesture offset.\r\n   */\n  return x * slope + b;\n};\n/**\r\n * The tablet/desktop card modal activates\r\n * when the window width is >= 768.\r\n * At that point, the presenting element\r\n * is not transformed, so we do not need to\r\n * adjust the status bar color.\r\n *\r\n * Note: We check supportsDefaultStatusBarStyle so that\r\n * Capacitor <= 2 users do not get their status bar\r\n * stuck in an inconsistent state due to a lack of\r\n * support for Style.Default.\r\n */\nconst setCardStatusBarDark = () => {\n  // TODO FW-4696 Remove supportDefaultStatusBarStyle in Ionic v8\n  if (!win || win.innerWidth >= 768 || !StatusBar.supportsDefaultStatusBarStyle()) {\n    return;\n  }\n  StatusBar.setStyle({\n    style: Style.Dark\n  });\n};\nconst setCardStatusBarDefault = (defaultStyle = Style.Default) => {\n  // TODO FW-4696 Remove supportDefaultStatusBarStyle in Ionic v8\n  if (!win || win.innerWidth >= 768 || !StatusBar.supportsDefaultStatusBarStyle()) {\n    return;\n  }\n  StatusBar.setStyle({\n    style: defaultStyle\n  });\n};\nconst handleCanDismiss = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (el, animation) {\n    /**\r\n     * If canDismiss is not a function\r\n     * then we can return early. If canDismiss is `true`,\r\n     * then canDismissBlocksGesture is `false` as canDismiss\r\n     * will never interrupt the gesture. As a result,\r\n     * this code block is never reached. If canDismiss is `false`,\r\n     * then we never dismiss.\r\n     */\n    if (typeof el.canDismiss !== 'function') {\n      return;\n    }\n    /**\r\n     * Run the canDismiss callback.\r\n     * If the function returns `true`,\r\n     * then we can proceed with dismiss.\r\n     */\n    const shouldDismiss = yield el.canDismiss(undefined, GESTURE);\n    if (!shouldDismiss) {\n      return;\n    }\n    /**\r\n     * If canDismiss resolved after the snap\r\n     * back animation finished, we can\r\n     * dismiss immediately.\r\n     *\r\n     * If canDismiss resolved before the snap\r\n     * back animation finished, we need to\r\n     * wait until the snap back animation is\r\n     * done before dismissing.\r\n     */\n    if (animation.isRunning()) {\n      animation.onFinish(() => {\n        el.dismiss(undefined, 'handler');\n      }, {\n        oneTimeCallback: true\n      });\n    } else {\n      el.dismiss(undefined, 'handler');\n    }\n  });\n  return function handleCanDismiss(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\r\n * This function lets us simulate a realistic spring-like animation\r\n * when swiping down on the modal.\r\n * There are two forces that we need to use to compute the spring physics:\r\n *\r\n * 1. Stiffness, k: This is a measure of resistance applied a spring.\r\n * 2. Dampening, c: This value has the effect of reducing or preventing oscillation.\r\n *\r\n * Using these two values, we can calculate the Spring Force and the Dampening Force\r\n * to compute the total force applied to a spring.\r\n *\r\n * Spring Force: This force pulls a spring back into its equilibrium position.\r\n * Hooke's Law tells us that that spring force (FS) = kX.\r\n * k is the stiffness of a spring, and X is the displacement of the spring from its\r\n * equilibrium position. In this case, it is the amount by which the free end\r\n * of a spring was displaced (stretched/pushed) from its \"relaxed\" position.\r\n *\r\n * Dampening Force: This force slows down motion. Without it, a spring would oscillate forever.\r\n * The dampening force, FD, can be found via this formula: FD = -cv\r\n * where c the dampening value and v is velocity.\r\n *\r\n * Therefore, the resulting force that is exerted on the block is:\r\n * F = FS + FD = -kX - cv\r\n *\r\n * Newton's 2nd Law tells us that F = ma:\r\n * ma = -kX - cv.\r\n *\r\n * For Ionic's purposes, we can assume that m = 1:\r\n * a = -kX - cv\r\n *\r\n * Imagine a block attached to the end of a spring. At equilibrium\r\n * the block is at position x = 1.\r\n * Pressing on the block moves it to position x = 0;\r\n * So, to calculate the displacement, we need to take the\r\n * current position and subtract the previous position from it.\r\n * X = x - x0 = 0 - 1 = -1.\r\n *\r\n * For Ionic's purposes, we are only pushing on the spring modal\r\n * so we have a max position of 1.\r\n * As a result, we can expand displacement to this formula:\r\n * X = x - 1\r\n *\r\n * a = -k(x - 1) - cv\r\n *\r\n * We can represent the motion of something as a function of time: f(t) = x.\r\n * The derivative of position gives us the velocity: f'(t)\r\n * The derivative of the velocity gives us the acceleration: f''(t)\r\n *\r\n * We can substitute the formula above with these values:\r\n *\r\n * f\"(t) = -k * (f(t) - 1) - c * f'(t)\r\n *\r\n * This is called a differential equation.\r\n *\r\n * We know that at t = 0, we are at x = 0 because the modal does not move: f(0) = 0\r\n * This means our velocity is also zero: f'(0) = 0.\r\n *\r\n * We can cheat a bit and plug the formula into Wolfram Alpha.\r\n * However, we need to pick stiffness and dampening values:\r\n * k = 0.57\r\n * c = 15\r\n *\r\n * I picked these as they are fairly close to native iOS's spring effect\r\n * with the modal.\r\n *\r\n * What we plug in is this: f(0) = 0; f'(0) = 0; f''(t) = -0.57(f(t) - 1) - 15f'(t)\r\n *\r\n * The result is a formula that lets us calculate the acceleration\r\n * for a given time t.\r\n * Note: This is the approximate form of the solution. Wolfram Alpha will\r\n * give you a complex differential equation too.\r\n */\nconst calculateSpringStep = t => {\n  return 0.00255275 * 2.71828 ** (-14.9619 * t) - 1.00255 * 2.71828 ** (-0.0380968 * t) + 1;\n};\n\n// Defaults for the card swipe animation\nconst SwipeToCloseDefaults = {\n  MIN_PRESENTING_SCALE: 0.93\n};\nconst createSwipeToCloseGesture = (el, animation, statusBarStyle, onDismiss) => {\n  /**\r\n   * The step value at which a card modal\r\n   * is eligible for dismissing via gesture.\r\n   */\n  const DISMISS_THRESHOLD = 0.5;\n  const height = el.offsetHeight;\n  let isOpen = false;\n  let canDismissBlocksGesture = false;\n  let contentEl = null;\n  let scrollEl = null;\n  const canDismissMaxStep = 0.2;\n  let initialScrollY = true;\n  let lastStep = 0;\n  const getScrollY = () => {\n    if (contentEl && isIonContent(contentEl)) {\n      return contentEl.scrollY;\n      /**\r\n       * Custom scroll containers are intended to be\r\n       * used with virtual scrolling, so we assume\r\n       * there is scrolling in this case.\r\n       */\n    } else {\n      return true;\n    }\n  };\n  const canStart = detail => {\n    const target = detail.event.target;\n    if (target === null || !target.closest) {\n      return true;\n    }\n    /**\r\n     * If we are swiping on the content,\r\n     * swiping should only be possible if\r\n     * the content is scrolled all the way\r\n     * to the top so that we do not interfere\r\n     * with scrolling.\r\n     *\r\n     * We cannot assume that the `ion-content`\r\n     * target will remain consistent between\r\n     * swipes. For example, when using\r\n     * ion-nav within a card modal it is\r\n     * possible to swipe, push a view, and then\r\n     * swipe again. The target content will not\r\n     * be the same between swipes.\r\n     */\n    contentEl = findClosestIonContent(target);\n    if (contentEl) {\n      /**\r\n       * The card should never swipe to close\r\n       * on the content with a refresher.\r\n       * Note: We cannot solve this by making the\r\n       * swipeToClose gesture have a higher priority\r\n       * than the refresher gesture as the iOS native\r\n       * refresh gesture uses a scroll listener in\r\n       * addition to a gesture.\r\n       *\r\n       * Note: Do not use getScrollElement here\r\n       * because we need this to be a synchronous\r\n       * operation, and getScrollElement is\r\n       * asynchronous.\r\n       */\n      if (isIonContent(contentEl)) {\n        const root = getElementRoot(contentEl);\n        scrollEl = root.querySelector('.inner-scroll');\n      } else {\n        scrollEl = contentEl;\n      }\n      const hasRefresherInContent = !!contentEl.querySelector('ion-refresher');\n      return !hasRefresherInContent && scrollEl.scrollTop === 0;\n    }\n    /**\r\n     * Card should be swipeable on all\r\n     * parts of the modal except for the footer.\r\n     */\n    const footer = target.closest('ion-footer');\n    if (footer === null) {\n      return true;\n    }\n    return false;\n  };\n  const onStart = detail => {\n    const {\n      deltaY\n    } = detail;\n    /**\r\n     * Get the initial scrollY value so\r\n     * that we can correctly reset the scrollY\r\n     * prop when the gesture ends.\r\n     */\n    initialScrollY = getScrollY();\n    /**\r\n     * If canDismiss is anything other than `true`\r\n     * then users should be able to swipe down\r\n     * until a threshold is hit. At that point,\r\n     * the card modal should not proceed any further.\r\n     * TODO (FW-937)\r\n     * Remove undefined check\r\n     */\n    canDismissBlocksGesture = el.canDismiss !== undefined && el.canDismiss !== true;\n    /**\r\n     * If we are pulling down, then\r\n     * it is possible we are pulling on the\r\n     * content. We do not want scrolling to\r\n     * happen at the same time as the gesture.\r\n     */\n    if (deltaY > 0 && contentEl) {\n      disableContentScrollY(contentEl);\n    }\n    animation.progressStart(true, isOpen ? 1 : 0);\n  };\n  const onMove = detail => {\n    const {\n      deltaY\n    } = detail;\n    /**\r\n     * If we are pulling down, then\r\n     * it is possible we are pulling on the\r\n     * content. We do not want scrolling to\r\n     * happen at the same time as the gesture.\r\n     */\n    if (deltaY > 0 && contentEl) {\n      disableContentScrollY(contentEl);\n    }\n    /**\r\n     * If we are swiping on the content\r\n     * then the swipe gesture should only\r\n     * happen if we are pulling down.\r\n     *\r\n     * However, if we pull up and\r\n     * then down such that the scroll position\r\n     * returns to 0, we should be able to swipe\r\n     * the card.\r\n     */\n    const step = detail.deltaY / height;\n    /**\r\n     * Check if user is swiping down and\r\n     * if we have a canDismiss value that\r\n     * should block the gesture from\r\n     * proceeding,\r\n     */\n    const isAttemptingDismissWithCanDismiss = step >= 0 && canDismissBlocksGesture;\n    /**\r\n     * If we are blocking the gesture from dismissing,\r\n     * set the max step value so that the sheet cannot be\r\n     * completely hidden.\r\n     */\n    const maxStep = isAttemptingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;\n    /**\r\n     * If we are blocking the gesture from\r\n     * dismissing, calculate the spring modifier value\r\n     * this will be added to the starting breakpoint\r\n     * value to give the gesture a spring-like feeling.\r\n     * Note that the starting breakpoint is always 0,\r\n     * so we omit adding 0 to the result.\r\n     */\n    const processedStep = isAttemptingDismissWithCanDismiss ? calculateSpringStep(step / maxStep) : step;\n    const clampedStep = clamp(0.0001, processedStep, maxStep);\n    animation.progressStep(clampedStep);\n    /**\r\n     * When swiping down half way, the status bar style\r\n     * should be reset to its default value.\r\n     *\r\n     * We track lastStep so that we do not fire these\r\n     * functions on every onMove, only when the user has\r\n     * crossed a certain threshold.\r\n     */\n    if (clampedStep >= DISMISS_THRESHOLD && lastStep < DISMISS_THRESHOLD) {\n      setCardStatusBarDefault(statusBarStyle);\n      /**\r\n       * However, if we swipe back up, then the\r\n       * status bar style should be set to have light\r\n       * text on a dark background.\r\n       */\n    } else if (clampedStep < DISMISS_THRESHOLD && lastStep >= DISMISS_THRESHOLD) {\n      setCardStatusBarDark();\n    }\n    lastStep = clampedStep;\n  };\n  const onEnd = detail => {\n    const velocity = detail.velocityY;\n    const step = detail.deltaY / height;\n    const isAttemptingDismissWithCanDismiss = step >= 0 && canDismissBlocksGesture;\n    const maxStep = isAttemptingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;\n    const processedStep = isAttemptingDismissWithCanDismiss ? calculateSpringStep(step / maxStep) : step;\n    const clampedStep = clamp(0.0001, processedStep, maxStep);\n    const threshold = (detail.deltaY + velocity * 1000) / height;\n    /**\r\n     * If canDismiss blocks\r\n     * the swipe gesture, then the\r\n     * animation can never complete until\r\n     * canDismiss is checked.\r\n     */\n    const shouldComplete = !isAttemptingDismissWithCanDismiss && threshold >= DISMISS_THRESHOLD;\n    let newStepValue = shouldComplete ? -0.001 : 0.001;\n    if (!shouldComplete) {\n      animation.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n      newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], clampedStep)[0];\n    } else {\n      animation.easing('cubic-bezier(0.32, 0.72, 0, 1)');\n      newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], clampedStep)[0];\n    }\n    const duration = shouldComplete ? computeDuration(step * height, velocity) : computeDuration((1 - clampedStep) * height, velocity);\n    isOpen = shouldComplete;\n    gesture.enable(false);\n    if (contentEl) {\n      resetContentScrollY(contentEl, initialScrollY);\n    }\n    animation.onFinish(() => {\n      if (!shouldComplete) {\n        gesture.enable(true);\n      }\n    }).progressEnd(shouldComplete ? 1 : 0, newStepValue, duration);\n    /**\r\n     * If the canDismiss value blocked the gesture\r\n     * from proceeding, then we should ignore whatever\r\n     * shouldComplete is. Whether or not the modal\r\n     * animation should complete is now determined by\r\n     * canDismiss.\r\n     *\r\n     * If the user swiped >25% of the way\r\n     * to the max step, then we should\r\n     * check canDismiss. 25% was chosen\r\n     * to avoid accidental swipes.\r\n     */\n    if (isAttemptingDismissWithCanDismiss && clampedStep > maxStep / 4) {\n      handleCanDismiss(el, animation);\n    } else if (shouldComplete) {\n      onDismiss();\n    }\n  };\n  const gesture = createGesture({\n    el,\n    gestureName: 'modalSwipeToClose',\n    gesturePriority: OVERLAY_GESTURE_PRIORITY,\n    direction: 'y',\n    threshold: 10,\n    canStart,\n    onStart,\n    onMove,\n    onEnd\n  });\n  return gesture;\n};\nconst computeDuration = (remaining, velocity) => {\n  return clamp(400, remaining / Math.abs(velocity * 1.1), 500);\n};\nconst createSheetEnterAnimation = opts => {\n  const {\n    currentBreakpoint,\n    backdropBreakpoint\n  } = opts;\n  /**\r\n   * If the backdropBreakpoint is undefined, then the backdrop\r\n   * should always fade in. If the backdropBreakpoint came before the\r\n   * current breakpoint, then the backdrop should be fading in.\r\n   */\n  const shouldShowBackdrop = backdropBreakpoint === undefined || backdropBreakpoint < currentBreakpoint;\n  const initialBackdrop = shouldShowBackdrop ? `calc(var(--backdrop-opacity) * ${currentBreakpoint})` : '0';\n  const backdropAnimation = createAnimation('backdropAnimation').fromTo('opacity', 0, initialBackdrop);\n  if (shouldShowBackdrop) {\n    backdropAnimation.beforeStyles({\n      'pointer-events': 'none'\n    }).afterClearStyles(['pointer-events']);\n  }\n  const wrapperAnimation = createAnimation('wrapperAnimation').keyframes([{\n    offset: 0,\n    opacity: 1,\n    transform: 'translateY(100%)'\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: `translateY(${100 - currentBreakpoint * 100}%)`\n  }]);\n  return {\n    wrapperAnimation,\n    backdropAnimation\n  };\n};\nconst createSheetLeaveAnimation = opts => {\n  const {\n    currentBreakpoint,\n    backdropBreakpoint\n  } = opts;\n  /**\r\n   * Backdrop does not always fade in from 0 to 1 if backdropBreakpoint\r\n   * is defined, so we need to account for that offset by figuring out\r\n   * what the current backdrop value should be.\r\n   */\n  const backdropValue = `calc(var(--backdrop-opacity) * ${getBackdropValueForSheet(currentBreakpoint, backdropBreakpoint)})`;\n  const defaultBackdrop = [{\n    offset: 0,\n    opacity: backdropValue\n  }, {\n    offset: 1,\n    opacity: 0\n  }];\n  const customBackdrop = [{\n    offset: 0,\n    opacity: backdropValue\n  }, {\n    offset: backdropBreakpoint,\n    opacity: 0\n  }, {\n    offset: 1,\n    opacity: 0\n  }];\n  const backdropAnimation = createAnimation('backdropAnimation').keyframes(backdropBreakpoint !== 0 ? customBackdrop : defaultBackdrop);\n  const wrapperAnimation = createAnimation('wrapperAnimation').keyframes([{\n    offset: 0,\n    opacity: 1,\n    transform: `translateY(${100 - currentBreakpoint * 100}%)`\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: `translateY(100%)`\n  }]);\n  return {\n    wrapperAnimation,\n    backdropAnimation\n  };\n};\nconst createEnterAnimation$1 = () => {\n  const backdropAnimation = createAnimation().fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({\n    'pointer-events': 'none'\n  }).afterClearStyles(['pointer-events']);\n  const wrapperAnimation = createAnimation().fromTo('transform', 'translateY(100vh)', 'translateY(0vh)');\n  return {\n    backdropAnimation,\n    wrapperAnimation\n  };\n};\n/**\r\n * iOS Modal Enter Animation for the Card presentation style\r\n */\nconst iosEnterAnimation = (baseEl, opts) => {\n  const {\n    presentingEl,\n    currentBreakpoint\n  } = opts;\n  const root = getElementRoot(baseEl);\n  const {\n    wrapperAnimation,\n    backdropAnimation\n  } = currentBreakpoint !== undefined ? createSheetEnterAnimation(opts) : createEnterAnimation$1();\n  backdropAnimation.addElement(root.querySelector('ion-backdrop'));\n  wrapperAnimation.addElement(root.querySelectorAll('.modal-wrapper, .modal-shadow')).beforeStyles({\n    opacity: 1\n  });\n  const baseAnimation = createAnimation('entering-base').addElement(baseEl).easing('cubic-bezier(0.32,0.72,0,1)').duration(500).addAnimation(wrapperAnimation);\n  if (presentingEl) {\n    const isMobile = window.innerWidth < 768;\n    const hasCardModal = presentingEl.tagName === 'ION-MODAL' && presentingEl.presentingElement !== undefined;\n    const presentingElRoot = getElementRoot(presentingEl);\n    const presentingAnimation = createAnimation().beforeStyles({\n      transform: 'translateY(0)',\n      'transform-origin': 'top center',\n      overflow: 'hidden'\n    });\n    const bodyEl = document.body;\n    if (isMobile) {\n      /**\r\n       * Fallback for browsers that does not support `max()` (ex: Firefox)\r\n       * No need to worry about statusbar padding since engines like Gecko\r\n       * are not used as the engine for standalone Cordova/Capacitor apps\r\n       */\n      const transformOffset = !CSS.supports('width', 'max(0px, 1px)') ? '30px' : 'max(30px, var(--ion-safe-area-top))';\n      const modalTransform = hasCardModal ? '-10px' : transformOffset;\n      const toPresentingScale = SwipeToCloseDefaults.MIN_PRESENTING_SCALE;\n      const finalTransform = `translateY(${modalTransform}) scale(${toPresentingScale})`;\n      presentingAnimation.afterStyles({\n        transform: finalTransform\n      }).beforeAddWrite(() => bodyEl.style.setProperty('background-color', 'black')).addElement(presentingEl).keyframes([{\n        offset: 0,\n        filter: 'contrast(1)',\n        transform: 'translateY(0px) scale(1)',\n        borderRadius: '0px'\n      }, {\n        offset: 1,\n        filter: 'contrast(0.85)',\n        transform: finalTransform,\n        borderRadius: '10px 10px 0 0'\n      }]);\n      baseAnimation.addAnimation(presentingAnimation);\n    } else {\n      baseAnimation.addAnimation(backdropAnimation);\n      if (!hasCardModal) {\n        wrapperAnimation.fromTo('opacity', '0', '1');\n      } else {\n        const toPresentingScale = hasCardModal ? SwipeToCloseDefaults.MIN_PRESENTING_SCALE : 1;\n        const finalTransform = `translateY(-10px) scale(${toPresentingScale})`;\n        presentingAnimation.afterStyles({\n          transform: finalTransform\n        }).addElement(presentingElRoot.querySelector('.modal-wrapper')).keyframes([{\n          offset: 0,\n          filter: 'contrast(1)',\n          transform: 'translateY(0) scale(1)'\n        }, {\n          offset: 1,\n          filter: 'contrast(0.85)',\n          transform: finalTransform\n        }]);\n        const shadowAnimation = createAnimation().afterStyles({\n          transform: finalTransform\n        }).addElement(presentingElRoot.querySelector('.modal-shadow')).keyframes([{\n          offset: 0,\n          opacity: '1',\n          transform: 'translateY(0) scale(1)'\n        }, {\n          offset: 1,\n          opacity: '0',\n          transform: finalTransform\n        }]);\n        baseAnimation.addAnimation([presentingAnimation, shadowAnimation]);\n      }\n    }\n  } else {\n    baseAnimation.addAnimation(backdropAnimation);\n  }\n  return baseAnimation;\n};\nconst createLeaveAnimation$1 = () => {\n  const backdropAnimation = createAnimation().fromTo('opacity', 'var(--backdrop-opacity)', 0);\n  const wrapperAnimation = createAnimation().fromTo('transform', 'translateY(0vh)', 'translateY(100vh)');\n  return {\n    backdropAnimation,\n    wrapperAnimation\n  };\n};\n/**\r\n * iOS Modal Leave Animation\r\n */\nconst iosLeaveAnimation = (baseEl, opts, duration = 500) => {\n  const {\n    presentingEl,\n    currentBreakpoint\n  } = opts;\n  const root = getElementRoot(baseEl);\n  const {\n    wrapperAnimation,\n    backdropAnimation\n  } = currentBreakpoint !== undefined ? createSheetLeaveAnimation(opts) : createLeaveAnimation$1();\n  backdropAnimation.addElement(root.querySelector('ion-backdrop'));\n  wrapperAnimation.addElement(root.querySelectorAll('.modal-wrapper, .modal-shadow')).beforeStyles({\n    opacity: 1\n  });\n  const baseAnimation = createAnimation('leaving-base').addElement(baseEl).easing('cubic-bezier(0.32,0.72,0,1)').duration(duration).addAnimation(wrapperAnimation);\n  if (presentingEl) {\n    const isMobile = window.innerWidth < 768;\n    const hasCardModal = presentingEl.tagName === 'ION-MODAL' && presentingEl.presentingElement !== undefined;\n    const presentingElRoot = getElementRoot(presentingEl);\n    const presentingAnimation = createAnimation().beforeClearStyles(['transform']).afterClearStyles(['transform']).onFinish(currentStep => {\n      // only reset background color if this is the last card-style modal\n      if (currentStep !== 1) {\n        return;\n      }\n      presentingEl.style.setProperty('overflow', '');\n      const numModals = Array.from(bodyEl.querySelectorAll('ion-modal:not(.overlay-hidden)')).filter(m => m.presentingElement !== undefined).length;\n      if (numModals <= 1) {\n        bodyEl.style.setProperty('background-color', '');\n      }\n    });\n    const bodyEl = document.body;\n    if (isMobile) {\n      const transformOffset = !CSS.supports('width', 'max(0px, 1px)') ? '30px' : 'max(30px, var(--ion-safe-area-top))';\n      const modalTransform = hasCardModal ? '-10px' : transformOffset;\n      const toPresentingScale = SwipeToCloseDefaults.MIN_PRESENTING_SCALE;\n      const finalTransform = `translateY(${modalTransform}) scale(${toPresentingScale})`;\n      presentingAnimation.addElement(presentingEl).keyframes([{\n        offset: 0,\n        filter: 'contrast(0.85)',\n        transform: finalTransform,\n        borderRadius: '10px 10px 0 0'\n      }, {\n        offset: 1,\n        filter: 'contrast(1)',\n        transform: 'translateY(0px) scale(1)',\n        borderRadius: '0px'\n      }]);\n      baseAnimation.addAnimation(presentingAnimation);\n    } else {\n      baseAnimation.addAnimation(backdropAnimation);\n      if (!hasCardModal) {\n        wrapperAnimation.fromTo('opacity', '1', '0');\n      } else {\n        const toPresentingScale = hasCardModal ? SwipeToCloseDefaults.MIN_PRESENTING_SCALE : 1;\n        const finalTransform = `translateY(-10px) scale(${toPresentingScale})`;\n        presentingAnimation.addElement(presentingElRoot.querySelector('.modal-wrapper')).afterStyles({\n          transform: 'translate3d(0, 0, 0)'\n        }).keyframes([{\n          offset: 0,\n          filter: 'contrast(0.85)',\n          transform: finalTransform\n        }, {\n          offset: 1,\n          filter: 'contrast(1)',\n          transform: 'translateY(0) scale(1)'\n        }]);\n        const shadowAnimation = createAnimation().addElement(presentingElRoot.querySelector('.modal-shadow')).afterStyles({\n          transform: 'translateY(0) scale(1)'\n        }).keyframes([{\n          offset: 0,\n          opacity: '0',\n          transform: finalTransform\n        }, {\n          offset: 1,\n          opacity: '1',\n          transform: 'translateY(0) scale(1)'\n        }]);\n        baseAnimation.addAnimation([presentingAnimation, shadowAnimation]);\n      }\n    }\n  } else {\n    baseAnimation.addAnimation(backdropAnimation);\n  }\n  return baseAnimation;\n};\nconst createEnterAnimation = () => {\n  const backdropAnimation = createAnimation().fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({\n    'pointer-events': 'none'\n  }).afterClearStyles(['pointer-events']);\n  const wrapperAnimation = createAnimation().keyframes([{\n    offset: 0,\n    opacity: 0.01,\n    transform: 'translateY(40px)'\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: `translateY(0px)`\n  }]);\n  return {\n    backdropAnimation,\n    wrapperAnimation\n  };\n};\n/**\r\n * Md Modal Enter Animation\r\n */\nconst mdEnterAnimation = (baseEl, opts) => {\n  const {\n    currentBreakpoint\n  } = opts;\n  const root = getElementRoot(baseEl);\n  const {\n    wrapperAnimation,\n    backdropAnimation\n  } = currentBreakpoint !== undefined ? createSheetEnterAnimation(opts) : createEnterAnimation();\n  backdropAnimation.addElement(root.querySelector('ion-backdrop'));\n  wrapperAnimation.addElement(root.querySelector('.modal-wrapper'));\n  return createAnimation().addElement(baseEl).easing('cubic-bezier(0.36,0.66,0.04,1)').duration(280).addAnimation([backdropAnimation, wrapperAnimation]);\n};\nconst createLeaveAnimation = () => {\n  const backdropAnimation = createAnimation().fromTo('opacity', 'var(--backdrop-opacity)', 0);\n  const wrapperAnimation = createAnimation().keyframes([{\n    offset: 0,\n    opacity: 0.99,\n    transform: `translateY(0px)`\n  }, {\n    offset: 1,\n    opacity: 0,\n    transform: 'translateY(40px)'\n  }]);\n  return {\n    backdropAnimation,\n    wrapperAnimation\n  };\n};\n/**\r\n * Md Modal Leave Animation\r\n */\nconst mdLeaveAnimation = (baseEl, opts) => {\n  const {\n    currentBreakpoint\n  } = opts;\n  const root = getElementRoot(baseEl);\n  const {\n    wrapperAnimation,\n    backdropAnimation\n  } = currentBreakpoint !== undefined ? createSheetLeaveAnimation(opts) : createLeaveAnimation();\n  backdropAnimation.addElement(root.querySelector('ion-backdrop'));\n  wrapperAnimation.addElement(root.querySelector('.modal-wrapper'));\n  return createAnimation().easing('cubic-bezier(0.47,0,0.745,0.715)').duration(200).addAnimation([backdropAnimation, wrapperAnimation]);\n};\nconst createSheetGesture = (baseEl, backdropEl, wrapperEl, initialBreakpoint, backdropBreakpoint, animation, breakpoints = [], getCurrentBreakpoint, onDismiss, onBreakpointChange) => {\n  // Defaults for the sheet swipe animation\n  const defaultBackdrop = [{\n    offset: 0,\n    opacity: 'var(--backdrop-opacity)'\n  }, {\n    offset: 1,\n    opacity: 0.01\n  }];\n  const customBackdrop = [{\n    offset: 0,\n    opacity: 'var(--backdrop-opacity)'\n  }, {\n    offset: 1 - backdropBreakpoint,\n    opacity: 0\n  }, {\n    offset: 1,\n    opacity: 0\n  }];\n  const SheetDefaults = {\n    WRAPPER_KEYFRAMES: [{\n      offset: 0,\n      transform: 'translateY(0%)'\n    }, {\n      offset: 1,\n      transform: 'translateY(100%)'\n    }],\n    BACKDROP_KEYFRAMES: backdropBreakpoint !== 0 ? customBackdrop : defaultBackdrop\n  };\n  const contentEl = baseEl.querySelector('ion-content');\n  const height = wrapperEl.clientHeight;\n  let currentBreakpoint = initialBreakpoint;\n  let offset = 0;\n  let canDismissBlocksGesture = false;\n  const canDismissMaxStep = 0.95;\n  const wrapperAnimation = animation.childAnimations.find(ani => ani.id === 'wrapperAnimation');\n  const backdropAnimation = animation.childAnimations.find(ani => ani.id === 'backdropAnimation');\n  const maxBreakpoint = breakpoints[breakpoints.length - 1];\n  const minBreakpoint = breakpoints[0];\n  const enableBackdrop = () => {\n    baseEl.style.setProperty('pointer-events', 'auto');\n    backdropEl.style.setProperty('pointer-events', 'auto');\n    /**\r\n     * When the backdrop is enabled, elements such\r\n     * as inputs should not be focusable outside\r\n     * the sheet.\r\n     */\n    baseEl.classList.remove('ion-disable-focus-trap');\n  };\n  const disableBackdrop = () => {\n    baseEl.style.setProperty('pointer-events', 'none');\n    backdropEl.style.setProperty('pointer-events', 'none');\n    /**\r\n     * When the backdrop is enabled, elements such\r\n     * as inputs should not be focusable outside\r\n     * the sheet.\r\n     * Adding this class disables focus trapping\r\n     * for the sheet temporarily.\r\n     */\n    baseEl.classList.add('ion-disable-focus-trap');\n  };\n  /**\r\n   * After the entering animation completes,\r\n   * we need to set the animation to go from\r\n   * offset 0 to offset 1 so that users can\r\n   * swipe in any direction. We then set the\r\n   * animation offset to the current breakpoint\r\n   * so there is no flickering.\r\n   */\n  if (wrapperAnimation && backdropAnimation) {\n    wrapperAnimation.keyframes([...SheetDefaults.WRAPPER_KEYFRAMES]);\n    backdropAnimation.keyframes([...SheetDefaults.BACKDROP_KEYFRAMES]);\n    animation.progressStart(true, 1 - currentBreakpoint);\n    /**\r\n     * If backdrop is not enabled, then content\r\n     * behind modal should be clickable. To do this, we need\r\n     * to remove pointer-events from ion-modal as a whole.\r\n     * ion-backdrop and .modal-wrapper always have pointer-events: auto\r\n     * applied, so the modal content can still be interacted with.\r\n     */\n    const shouldEnableBackdrop = currentBreakpoint > backdropBreakpoint;\n    if (shouldEnableBackdrop) {\n      enableBackdrop();\n    } else {\n      disableBackdrop();\n    }\n  }\n  if (contentEl && currentBreakpoint !== maxBreakpoint) {\n    contentEl.scrollY = false;\n  }\n  const canStart = detail => {\n    /**\r\n     * If we are swiping on the content, swiping should only be possible if the content\r\n     * is scrolled all the way to the top so that we do not interfere with scrolling.\r\n     *\r\n     * We cannot assume that the `ion-content` target will remain consistent between swipes.\r\n     * For example, when using ion-nav within a modal it is possible to swipe, push a view,\r\n     * and then swipe again. The target content will not be the same between swipes.\r\n     */\n    const contentEl = findClosestIonContent(detail.event.target);\n    currentBreakpoint = getCurrentBreakpoint();\n    if (currentBreakpoint === 1 && contentEl) {\n      /**\r\n       * The modal should never swipe to close on the content with a refresher.\r\n       * Note 1: We cannot solve this by making this gesture have a higher priority than\r\n       * the refresher gesture as the iOS native refresh gesture uses a scroll listener in\r\n       * addition to a gesture.\r\n       *\r\n       * Note 2: Do not use getScrollElement here because we need this to be a synchronous\r\n       * operation, and getScrollElement is asynchronous.\r\n       */\n      const scrollEl = isIonContent(contentEl) ? getElementRoot(contentEl).querySelector('.inner-scroll') : contentEl;\n      const hasRefresherInContent = !!contentEl.querySelector('ion-refresher');\n      return !hasRefresherInContent && scrollEl.scrollTop === 0;\n    }\n    return true;\n  };\n  const onStart = detail => {\n    /**\r\n     * If canDismiss is anything other than `true`\r\n     * then users should be able to swipe down\r\n     * until a threshold is hit. At that point,\r\n     * the card modal should not proceed any further.\r\n     *\r\n     * canDismiss is never fired via gesture if there is\r\n     * no 0 breakpoint. However, it can be fired if the user\r\n     * presses Esc or the hardware back button.\r\n     * TODO (FW-937)\r\n     * Remove undefined check\r\n     */\n    canDismissBlocksGesture = baseEl.canDismiss !== undefined && baseEl.canDismiss !== true && minBreakpoint === 0;\n    /**\r\n     * If we are pulling down, then it is possible we are pulling on the content.\r\n     * We do not want scrolling to happen at the same time as the gesture.\r\n     */\n    if (detail.deltaY > 0 && contentEl) {\n      contentEl.scrollY = false;\n    }\n    raf(() => {\n      /**\r\n       * Dismisses the open keyboard when the sheet drag gesture is started.\r\n       * Sets the focus onto the modal element.\r\n       */\n      baseEl.focus();\n    });\n    animation.progressStart(true, 1 - currentBreakpoint);\n  };\n  const onMove = detail => {\n    /**\r\n     * If we are pulling down, then it is possible we are pulling on the content.\r\n     * We do not want scrolling to happen at the same time as the gesture.\r\n     * This accounts for when the user scrolls down, scrolls all the way up, and then\r\n     * pulls down again such that the modal should start to move.\r\n     */\n    if (detail.deltaY > 0 && contentEl) {\n      contentEl.scrollY = false;\n    }\n    /**\r\n     * Given the change in gesture position on the Y axis,\r\n     * compute where the offset of the animation should be\r\n     * relative to where the user dragged.\r\n     */\n    const initialStep = 1 - currentBreakpoint;\n    const secondToLastBreakpoint = breakpoints.length > 1 ? 1 - breakpoints[1] : undefined;\n    const step = initialStep + detail.deltaY / height;\n    const isAttemptingDismissWithCanDismiss = secondToLastBreakpoint !== undefined && step >= secondToLastBreakpoint && canDismissBlocksGesture;\n    /**\r\n     * If we are blocking the gesture from dismissing,\r\n     * set the max step value so that the sheet cannot be\r\n     * completely hidden.\r\n     */\n    const maxStep = isAttemptingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;\n    /**\r\n     * If we are blocking the gesture from\r\n     * dismissing, calculate the spring modifier value\r\n     * this will be added to the starting breakpoint\r\n     * value to give the gesture a spring-like feeling.\r\n     * Note that when isAttemptingDismissWithCanDismiss is true,\r\n     * the modifier is always added to the breakpoint that\r\n     * appears right after the 0 breakpoint.\r\n     *\r\n     * Note that this modifier is essentially the progression\r\n     * between secondToLastBreakpoint and maxStep which is\r\n     * why we subtract secondToLastBreakpoint. This lets us get\r\n     * the result as a value from 0 to 1.\r\n     */\n    const processedStep = isAttemptingDismissWithCanDismiss && secondToLastBreakpoint !== undefined ? secondToLastBreakpoint + calculateSpringStep((step - secondToLastBreakpoint) / (maxStep - secondToLastBreakpoint)) : step;\n    offset = clamp(0.0001, processedStep, maxStep);\n    animation.progressStep(offset);\n  };\n  const onEnd = detail => {\n    /**\r\n     * When the gesture releases, we need to determine\r\n     * the closest breakpoint to snap to.\r\n     */\n    const velocity = detail.velocityY;\n    const threshold = (detail.deltaY + velocity * 350) / height;\n    const diff = currentBreakpoint - threshold;\n    const closest = breakpoints.reduce((a, b) => {\n      return Math.abs(b - diff) < Math.abs(a - diff) ? b : a;\n    });\n    moveSheetToBreakpoint({\n      breakpoint: closest,\n      breakpointOffset: offset,\n      canDismiss: canDismissBlocksGesture,\n      /**\r\n       * The swipe is user-driven, so we should\r\n       * always animate when the gesture ends.\r\n       */\n      animated: true\n    });\n  };\n  const moveSheetToBreakpoint = options => {\n    const {\n      breakpoint,\n      canDismiss,\n      breakpointOffset,\n      animated\n    } = options;\n    /**\r\n     * canDismiss should only prevent snapping\r\n     * when users are trying to dismiss. If canDismiss\r\n     * is present but the user is trying to swipe upwards,\r\n     * we should allow that to happen,\r\n     */\n    const shouldPreventDismiss = canDismiss && breakpoint === 0;\n    const snapToBreakpoint = shouldPreventDismiss ? currentBreakpoint : breakpoint;\n    const shouldRemainOpen = snapToBreakpoint !== 0;\n    currentBreakpoint = 0;\n    /**\r\n     * Update the animation so that it plays from\r\n     * the last offset to the closest snap point.\r\n     */\n    if (wrapperAnimation && backdropAnimation) {\n      wrapperAnimation.keyframes([{\n        offset: 0,\n        transform: `translateY(${breakpointOffset * 100}%)`\n      }, {\n        offset: 1,\n        transform: `translateY(${(1 - snapToBreakpoint) * 100}%)`\n      }]);\n      backdropAnimation.keyframes([{\n        offset: 0,\n        opacity: `calc(var(--backdrop-opacity) * ${getBackdropValueForSheet(1 - breakpointOffset, backdropBreakpoint)})`\n      }, {\n        offset: 1,\n        opacity: `calc(var(--backdrop-opacity) * ${getBackdropValueForSheet(snapToBreakpoint, backdropBreakpoint)})`\n      }]);\n      animation.progressStep(0);\n    }\n    /**\r\n     * Gesture should remain disabled until the\r\n     * snapping animation completes.\r\n     */\n    gesture.enable(false);\n    if (shouldPreventDismiss) {\n      handleCanDismiss(baseEl, animation);\n    } else if (!shouldRemainOpen) {\n      onDismiss();\n    }\n    /**\r\n     * If the sheet is going to be fully expanded then we should enable\r\n     * scrolling immediately. The sheet modal animation takes ~500ms to finish\r\n     * so if we wait until then there is a visible delay for when scrolling is\r\n     * re-enabled. Native iOS allows for scrolling on the sheet modal as soon\r\n     * as the gesture is released, so we align with that.\r\n     */\n    if (contentEl && snapToBreakpoint === breakpoints[breakpoints.length - 1]) {\n      contentEl.scrollY = true;\n    }\n    return new Promise(resolve => {\n      animation.onFinish(() => {\n        if (shouldRemainOpen) {\n          /**\r\n           * Once the snapping animation completes,\r\n           * we need to reset the animation to go\r\n           * from 0 to 1 so users can swipe in any direction.\r\n           * We then set the animation offset to the current\r\n           * breakpoint so that it starts at the snapped position.\r\n           */\n          if (wrapperAnimation && backdropAnimation) {\n            raf(() => {\n              wrapperAnimation.keyframes([...SheetDefaults.WRAPPER_KEYFRAMES]);\n              backdropAnimation.keyframes([...SheetDefaults.BACKDROP_KEYFRAMES]);\n              animation.progressStart(true, 1 - snapToBreakpoint);\n              currentBreakpoint = snapToBreakpoint;\n              onBreakpointChange(currentBreakpoint);\n              /**\r\n               * Backdrop should become enabled\r\n               * after the backdropBreakpoint value\r\n               */\n              const shouldEnableBackdrop = currentBreakpoint > backdropBreakpoint;\n              if (shouldEnableBackdrop) {\n                enableBackdrop();\n              } else {\n                disableBackdrop();\n              }\n              gesture.enable(true);\n              resolve();\n            });\n          } else {\n            gesture.enable(true);\n            resolve();\n          }\n        } else {\n          resolve();\n        }\n        /**\r\n         * This must be a one time callback\r\n         * otherwise a new callback will\r\n         * be added every time onEnd runs.\r\n         */\n      }, {\n        oneTimeCallback: true\n      }).progressEnd(1, 0, animated ? 500 : 0);\n    });\n  };\n  const gesture = createGesture({\n    el: wrapperEl,\n    gestureName: 'modalSheet',\n    gesturePriority: 40,\n    direction: 'y',\n    threshold: 10,\n    canStart,\n    onStart,\n    onMove,\n    onEnd\n  });\n  return {\n    gesture,\n    moveSheetToBreakpoint\n  };\n};\nconst modalIosCss = \":host{--width:100%;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--overflow:hidden;--border-radius:0;--border-width:0;--border-style:none;--border-color:transparent;--background:var(--ion-background-color, #fff);--box-shadow:none;--backdrop-opacity:0;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;color:var(--ion-text-color, #000);contain:strict}.modal-wrapper,ion-backdrop{pointer-events:auto}:host(.overlay-hidden){display:none}.modal-wrapper,.modal-shadow{border-radius:var(--border-radius);width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:var(--overflow);z-index:10}.modal-shadow{position:absolute;background:transparent}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--width:600px;--height:500px;--ion-safe-area-top:0px;--ion-safe-area-bottom:0px;--ion-safe-area-right:0px;--ion-safe-area-left:0px}}@media only screen and (min-width: 768px) and (min-height: 768px){:host{--width:600px;--height:600px}}.modal-handle{left:0px;right:0px;top:5px;border-radius:8px;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;position:absolute;width:36px;height:5px;-webkit-transform:translateZ(0);transform:translateZ(0);border:0;background:var(--ion-color-step-350, #c0c0be);cursor:pointer;z-index:11}.modal-handle::before{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px;padding-top:4px;padding-bottom:4px;position:absolute;width:36px;height:5px;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);content:\\\"\\\"}:host(.modal-sheet){--height:calc(100% - (var(--ion-safe-area-top) + 10px))}:host(.modal-sheet) .modal-wrapper,:host(.modal-sheet) .modal-shadow{position:absolute;bottom:0}:host{--backdrop-opacity:var(--ion-backdrop-opacity, 0.4)}:host(.modal-card),:host(.modal-sheet){--border-radius:10px}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--border-radius:10px}}.modal-wrapper{-webkit-transform:translate3d(0,  100%,  0);transform:translate3d(0,  100%,  0)}@media screen and (max-width: 767px){@supports (width: max(0px, 1px)){:host(.modal-card){--height:calc(100% - max(30px, var(--ion-safe-area-top)) - 10px)}}@supports not (width: max(0px, 1px)){:host(.modal-card){--height:calc(100% - 40px)}}:host(.modal-card) .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}:host-context([dir=rtl]):host(.modal-card) .modal-wrapper,:host-context([dir=rtl]).modal-card .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}@supports selector(:dir(rtl)){:host(.modal-card:dir(rtl)) .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}}:host(.modal-card){--backdrop-opacity:0;--width:100%;-ms-flex-align:end;align-items:flex-end}:host(.modal-card) .modal-shadow{display:none}:host(.modal-card) ion-backdrop{pointer-events:none}}@media screen and (min-width: 768px){:host(.modal-card){--width:calc(100% - 120px);--height:calc(100% - (120px + var(--ion-safe-area-top) + var(--ion-safe-area-bottom)));--max-width:720px;--max-height:1000px;--backdrop-opacity:0;--box-shadow:0px 0px 30px 10px rgba(0, 0, 0, 0.1);-webkit-transition:all 0.5s ease-in-out;transition:all 0.5s ease-in-out}:host(.modal-card) .modal-wrapper{-webkit-box-shadow:none;box-shadow:none}:host(.modal-card) .modal-shadow{-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow)}}:host(.modal-sheet) .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}:host-context([dir=rtl]):host(.modal-sheet) .modal-wrapper,:host-context([dir=rtl]).modal-sheet .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}@supports selector(:dir(rtl)){:host(.modal-sheet:dir(rtl)) .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}}\";\nconst IonModalIosStyle0 = modalIosCss;\nconst modalMdCss = \":host{--width:100%;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--overflow:hidden;--border-radius:0;--border-width:0;--border-style:none;--border-color:transparent;--background:var(--ion-background-color, #fff);--box-shadow:none;--backdrop-opacity:0;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;color:var(--ion-text-color, #000);contain:strict}.modal-wrapper,ion-backdrop{pointer-events:auto}:host(.overlay-hidden){display:none}.modal-wrapper,.modal-shadow{border-radius:var(--border-radius);width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:var(--overflow);z-index:10}.modal-shadow{position:absolute;background:transparent}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--width:600px;--height:500px;--ion-safe-area-top:0px;--ion-safe-area-bottom:0px;--ion-safe-area-right:0px;--ion-safe-area-left:0px}}@media only screen and (min-width: 768px) and (min-height: 768px){:host{--width:600px;--height:600px}}.modal-handle{left:0px;right:0px;top:5px;border-radius:8px;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;position:absolute;width:36px;height:5px;-webkit-transform:translateZ(0);transform:translateZ(0);border:0;background:var(--ion-color-step-350, #c0c0be);cursor:pointer;z-index:11}.modal-handle::before{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px;padding-top:4px;padding-bottom:4px;position:absolute;width:36px;height:5px;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);content:\\\"\\\"}:host(.modal-sheet){--height:calc(100% - (var(--ion-safe-area-top) + 10px))}:host(.modal-sheet) .modal-wrapper,:host(.modal-sheet) .modal-shadow{position:absolute;bottom:0}:host{--backdrop-opacity:var(--ion-backdrop-opacity, 0.32)}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--border-radius:2px;--box-shadow:0 28px 48px rgba(0, 0, 0, 0.4)}}.modal-wrapper{-webkit-transform:translate3d(0,  40px,  0);transform:translate3d(0,  40px,  0);opacity:0.01}\";\nconst IonModalMdStyle0 = modalMdCss;\nconst Modal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.didPresent = createEvent(this, \"ionModalDidPresent\", 7);\n    this.willPresent = createEvent(this, \"ionModalWillPresent\", 7);\n    this.willDismiss = createEvent(this, \"ionModalWillDismiss\", 7);\n    this.didDismiss = createEvent(this, \"ionModalDidDismiss\", 7);\n    this.ionBreakpointDidChange = createEvent(this, \"ionBreakpointDidChange\", 7);\n    this.didPresentShorthand = createEvent(this, \"didPresent\", 7);\n    this.willPresentShorthand = createEvent(this, \"willPresent\", 7);\n    this.willDismissShorthand = createEvent(this, \"willDismiss\", 7);\n    this.didDismissShorthand = createEvent(this, \"didDismiss\", 7);\n    this.ionMount = createEvent(this, \"ionMount\", 7);\n    this.lockController = createLockController();\n    this.triggerController = createTriggerController();\n    this.coreDelegate = CoreDelegate();\n    this.isSheetModal = false;\n    this.inheritedAttributes = {};\n    this.inline = false;\n    // Whether or not modal is being dismissed via gesture\n    this.gestureAnimationDismissing = false;\n    this.onHandleClick = () => {\n      const {\n        sheetTransition,\n        handleBehavior\n      } = this;\n      if (handleBehavior !== 'cycle' || sheetTransition !== undefined) {\n        /**\r\n         * The sheet modal should not advance to the next breakpoint\r\n         * if the handle behavior is not `cycle` or if the handle\r\n         * is clicked while the sheet is moving to a breakpoint.\r\n         */\n        return;\n      }\n      this.moveToNextBreakpoint();\n    };\n    this.onBackdropTap = () => {\n      const {\n        sheetTransition\n      } = this;\n      if (sheetTransition !== undefined) {\n        /**\r\n         * When the handle is double clicked at the largest breakpoint,\r\n         * it will start to move to the first breakpoint. While transitioning,\r\n         * the backdrop will often receive the second click. We prevent the\r\n         * backdrop from dismissing the modal while moving between breakpoints.\r\n         */\n        return;\n      }\n      this.dismiss(undefined, BACKDROP);\n    };\n    this.onLifecycle = modalEvent => {\n      const el = this.usersElement;\n      const name = LIFECYCLE_MAP[modalEvent.type];\n      if (el && name) {\n        const ev = new CustomEvent(name, {\n          bubbles: false,\n          cancelable: false,\n          detail: modalEvent.detail\n        });\n        el.dispatchEvent(ev);\n      }\n    };\n    this.presented = false;\n    this.hasController = false;\n    this.overlayIndex = undefined;\n    this.delegate = undefined;\n    this.keyboardClose = true;\n    this.enterAnimation = undefined;\n    this.leaveAnimation = undefined;\n    this.breakpoints = undefined;\n    this.initialBreakpoint = undefined;\n    this.backdropBreakpoint = 0;\n    this.handle = undefined;\n    this.handleBehavior = 'none';\n    this.component = undefined;\n    this.componentProps = undefined;\n    this.cssClass = undefined;\n    this.backdropDismiss = true;\n    this.showBackdrop = true;\n    this.animated = true;\n    this.presentingElement = undefined;\n    this.htmlAttributes = undefined;\n    this.isOpen = false;\n    this.trigger = undefined;\n    this.keepContentsMounted = false;\n    this.canDismiss = true;\n  }\n  onIsOpenChange(newValue, oldValue) {\n    if (newValue === true && oldValue === false) {\n      this.present();\n    } else if (newValue === false && oldValue === true) {\n      this.dismiss();\n    }\n  }\n  triggerChanged() {\n    const {\n      trigger,\n      el,\n      triggerController\n    } = this;\n    if (trigger) {\n      triggerController.addClickListener(el, trigger);\n    }\n  }\n  breakpointsChanged(breakpoints) {\n    if (breakpoints !== undefined) {\n      this.sortedBreakpoints = breakpoints.sort((a, b) => a - b);\n    }\n  }\n  connectedCallback() {\n    const {\n      el\n    } = this;\n    prepareOverlay(el);\n    this.triggerChanged();\n  }\n  disconnectedCallback() {\n    this.triggerController.removeClickListener();\n  }\n  componentWillLoad() {\n    const {\n      breakpoints,\n      initialBreakpoint,\n      el,\n      htmlAttributes\n    } = this;\n    const isSheetModal = this.isSheetModal = breakpoints !== undefined && initialBreakpoint !== undefined;\n    const attributesToInherit = ['aria-label', 'role'];\n    this.inheritedAttributes = inheritAttributes(el, attributesToInherit);\n    /**\r\n     * When using a controller modal you can set attributes\r\n     * using the htmlAttributes property. Since the above attributes\r\n     * need to be inherited inside of the modal, we need to look\r\n     * and see if these attributes are being set via htmlAttributes.\r\n     *\r\n     * We could alternatively move this to componentDidLoad to simplify the work\r\n     * here, but we'd then need to make inheritedAttributes a State variable,\r\n     * thus causing another render to always happen after the first render.\r\n     */\n    if (htmlAttributes !== undefined) {\n      attributesToInherit.forEach(attribute => {\n        const attributeValue = htmlAttributes[attribute];\n        if (attributeValue) {\n          /**\r\n           * If an attribute we need to inherit was\r\n           * set using htmlAttributes then add it to\r\n           * inheritedAttributes and remove it from htmlAttributes.\r\n           * This ensures the attribute is inherited and not\r\n           * set on the host.\r\n           *\r\n           * In this case, if an inherited attribute is set\r\n           * on the host element and using htmlAttributes then\r\n           * htmlAttributes wins, but that's not a pattern that we recommend.\r\n           * The only time you'd need htmlAttributes is when using modalController.\r\n           */\n          this.inheritedAttributes = Object.assign(Object.assign({}, this.inheritedAttributes), {\n            [attribute]: htmlAttributes[attribute]\n          });\n          delete htmlAttributes[attribute];\n        }\n      });\n    }\n    if (isSheetModal) {\n      this.currentBreakpoint = this.initialBreakpoint;\n    }\n    if (breakpoints !== undefined && initialBreakpoint !== undefined && !breakpoints.includes(initialBreakpoint)) {\n      printIonWarning('Your breakpoints array must include the initialBreakpoint value.');\n    }\n    setOverlayId(el);\n  }\n  componentDidLoad() {\n    /**\r\n     * If modal was rendered with isOpen=\"true\"\r\n     * then we should open modal immediately.\r\n     */\n    if (this.isOpen === true) {\n      raf(() => this.present());\n    }\n    this.breakpointsChanged(this.breakpoints);\n    /**\r\n     * When binding values in frameworks such as Angular\r\n     * it is possible for the value to be set after the Web Component\r\n     * initializes but before the value watcher is set up in Stencil.\r\n     * As a result, the watcher callback may not be fired.\r\n     * We work around this by manually calling the watcher\r\n     * callback when the component has loaded and the watcher\r\n     * is configured.\r\n     */\n    this.triggerChanged();\n  }\n  /**\r\n   * Determines whether or not an overlay\r\n   * is being used inline or via a controller/JS\r\n   * and returns the correct delegate.\r\n   * By default, subsequent calls to getDelegate\r\n   * will use a cached version of the delegate.\r\n   * This is useful for calling dismiss after\r\n   * present so that the correct delegate is given.\r\n   */\n  getDelegate(force = false) {\n    if (this.workingDelegate && !force) {\n      return {\n        delegate: this.workingDelegate,\n        inline: this.inline\n      };\n    }\n    /**\r\n     * If using overlay inline\r\n     * we potentially need to use the coreDelegate\r\n     * so that this works in vanilla JS apps.\r\n     * If a developer has presented this component\r\n     * via a controller, then we can assume\r\n     * the component is already in the\r\n     * correct place.\r\n     */\n    const parentEl = this.el.parentNode;\n    const inline = this.inline = parentEl !== null && !this.hasController;\n    const delegate = this.workingDelegate = inline ? this.delegate || this.coreDelegate : this.delegate;\n    return {\n      inline,\n      delegate\n    };\n  }\n  /**\r\n   * Determines whether or not the\r\n   * modal is allowed to dismiss based\r\n   * on the state of the canDismiss prop.\r\n   */\n  checkCanDismiss(data, role) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        canDismiss\n      } = _this;\n      if (typeof canDismiss === 'function') {\n        return canDismiss(data, role);\n      }\n      return canDismiss;\n    })();\n  }\n  /**\r\n   * Present the modal overlay after it has been created.\r\n   */\n  present() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const unlock = yield _this2.lockController.lock();\n      if (_this2.presented) {\n        unlock();\n        return;\n      }\n      const {\n        presentingElement,\n        el\n      } = _this2;\n      /**\r\n       * If the modal is presented multiple times (inline modals), we\r\n       * need to reset the current breakpoint to the initial breakpoint.\r\n       */\n      _this2.currentBreakpoint = _this2.initialBreakpoint;\n      const {\n        inline,\n        delegate\n      } = _this2.getDelegate(true);\n      /**\r\n       * Emit ionMount so JS Frameworks have an opportunity\r\n       * to add the child component to the DOM. The child\r\n       * component will be assigned to this.usersElement below.\r\n       */\n      _this2.ionMount.emit();\n      _this2.usersElement = yield attachComponent(delegate, el, _this2.component, ['ion-page'], _this2.componentProps, inline);\n      /**\r\n       * When using the lazy loaded build of Stencil, we need to wait\r\n       * for every Stencil component instance to be ready before presenting\r\n       * otherwise there can be a flash of unstyled content. With the\r\n       * custom elements bundle we need to wait for the JS framework\r\n       * mount the inner contents of the overlay otherwise WebKit may\r\n       * get the transition incorrect.\r\n       */\n      if (hasLazyBuild(el)) {\n        yield deepReady(_this2.usersElement);\n        /**\r\n         * If keepContentsMounted=\"true\" then the\r\n         * JS Framework has already mounted the inner\r\n         * contents so there is no need to wait.\r\n         * Otherwise, we need to wait for the JS\r\n         * Framework to mount the inner contents\r\n         * of this component.\r\n         */\n      } else if (!_this2.keepContentsMounted) {\n        yield waitForMount();\n      }\n      writeTask(() => _this2.el.classList.add('show-modal'));\n      const hasCardModal = presentingElement !== undefined;\n      /**\r\n       * We need to change the status bar at the\r\n       * start of the animation so that it completes\r\n       * by the time the card animation is done.\r\n       */\n      if (hasCardModal && getIonMode(_this2) === 'ios') {\n        // Cache the original status bar color before the modal is presented\n        _this2.statusBarStyle = yield StatusBar.getStyle();\n        setCardStatusBarDark();\n      }\n      yield present(_this2, 'modalEnter', iosEnterAnimation, mdEnterAnimation, {\n        presentingEl: presentingElement,\n        currentBreakpoint: _this2.initialBreakpoint,\n        backdropBreakpoint: _this2.backdropBreakpoint\n      });\n      /* tslint:disable-next-line */\n      if (typeof window !== 'undefined') {\n        /**\r\n         * This needs to be setup before any\r\n         * non-transition async work so it can be dereferenced\r\n         * in the dismiss method. The dismiss method\r\n         * only waits for the entering transition\r\n         * to finish. It does not wait for all of the `present`\r\n         * method to resolve.\r\n         */\n        _this2.keyboardOpenCallback = () => {\n          if (_this2.gesture) {\n            /**\r\n             * When the native keyboard is opened and the webview\r\n             * is resized, the gesture implementation will become unresponsive\r\n             * and enter a free-scroll mode.\r\n             *\r\n             * When the keyboard is opened, we disable the gesture for\r\n             * a single frame and re-enable once the contents have repositioned\r\n             * from the keyboard placement.\r\n             */\n            _this2.gesture.enable(false);\n            raf(() => {\n              if (_this2.gesture) {\n                _this2.gesture.enable(true);\n              }\n            });\n          }\n        };\n        window.addEventListener(KEYBOARD_DID_OPEN, _this2.keyboardOpenCallback);\n      }\n      if (_this2.isSheetModal) {\n        _this2.initSheetGesture();\n      } else if (hasCardModal) {\n        _this2.initSwipeToClose();\n      }\n      unlock();\n    })();\n  }\n  initSwipeToClose() {\n    var _this3 = this;\n    var _a;\n    if (getIonMode(this) !== 'ios') {\n      return;\n    }\n    const {\n      el\n    } = this;\n    // All of the elements needed for the swipe gesture\n    // should be in the DOM and referenced by now, except\n    // for the presenting el\n    const animationBuilder = this.leaveAnimation || config.get('modalLeave', iosLeaveAnimation);\n    const ani = this.animation = animationBuilder(el, {\n      presentingEl: this.presentingElement\n    });\n    const contentEl = findIonContent(el);\n    if (!contentEl) {\n      printIonContentErrorMsg(el);\n      return;\n    }\n    const statusBarStyle = (_a = this.statusBarStyle) !== null && _a !== void 0 ? _a : Style.Default;\n    this.gesture = createSwipeToCloseGesture(el, ani, statusBarStyle, () => {\n      /**\r\n       * While the gesture animation is finishing\r\n       * it is possible for a user to tap the backdrop.\r\n       * This would result in the dismiss animation\r\n       * being played again. Typically this is avoided\r\n       * by setting `presented = false` on the overlay\r\n       * component; however, we cannot do that here as\r\n       * that would prevent the element from being\r\n       * removed from the DOM.\r\n       */\n      this.gestureAnimationDismissing = true;\n      /**\r\n       * Reset the status bar style as the dismiss animation\r\n       * starts otherwise the status bar will be the wrong\r\n       * color for the duration of the dismiss animation.\r\n       * The dismiss method does this as well, but\r\n       * in this case it's only called once the animation\r\n       * has finished.\r\n       */\n      setCardStatusBarDefault(this.statusBarStyle);\n      this.animation.onFinish(/*#__PURE__*/_asyncToGenerator(function* () {\n        yield _this3.dismiss(undefined, GESTURE);\n        _this3.gestureAnimationDismissing = false;\n      }));\n    });\n    this.gesture.enable(true);\n  }\n  initSheetGesture() {\n    const {\n      wrapperEl,\n      initialBreakpoint,\n      backdropBreakpoint\n    } = this;\n    if (!wrapperEl || initialBreakpoint === undefined) {\n      return;\n    }\n    const animationBuilder = this.enterAnimation || config.get('modalEnter', iosEnterAnimation);\n    const ani = this.animation = animationBuilder(this.el, {\n      presentingEl: this.presentingElement,\n      currentBreakpoint: initialBreakpoint,\n      backdropBreakpoint\n    });\n    ani.progressStart(true, 1);\n    const {\n      gesture,\n      moveSheetToBreakpoint\n    } = createSheetGesture(this.el, this.backdropEl, wrapperEl, initialBreakpoint, backdropBreakpoint, ani, this.sortedBreakpoints, () => {\n      var _a;\n      return (_a = this.currentBreakpoint) !== null && _a !== void 0 ? _a : 0;\n    }, () => this.sheetOnDismiss(), breakpoint => {\n      if (this.currentBreakpoint !== breakpoint) {\n        this.currentBreakpoint = breakpoint;\n        this.ionBreakpointDidChange.emit({\n          breakpoint\n        });\n      }\n    });\n    this.gesture = gesture;\n    this.moveSheetToBreakpoint = moveSheetToBreakpoint;\n    this.gesture.enable(true);\n  }\n  sheetOnDismiss() {\n    var _this4 = this;\n    /**\r\n     * While the gesture animation is finishing\r\n     * it is possible for a user to tap the backdrop.\r\n     * This would result in the dismiss animation\r\n     * being played again. Typically this is avoided\r\n     * by setting `presented = false` on the overlay\r\n     * component; however, we cannot do that here as\r\n     * that would prevent the element from being\r\n     * removed from the DOM.\r\n     */\n    this.gestureAnimationDismissing = true;\n    this.animation.onFinish(/*#__PURE__*/_asyncToGenerator(function* () {\n      _this4.currentBreakpoint = 0;\n      _this4.ionBreakpointDidChange.emit({\n        breakpoint: _this4.currentBreakpoint\n      });\n      yield _this4.dismiss(undefined, GESTURE);\n      _this4.gestureAnimationDismissing = false;\n    }));\n  }\n  /**\r\n   * Dismiss the modal overlay after it has been presented.\r\n   *\r\n   * @param data Any data to emit in the dismiss events.\r\n   * @param role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'.\r\n   *\r\n   * This is a no-op if the overlay has not been presented yet. If you want\r\n   * to remove an overlay from the DOM that was never presented, use the\r\n   * [remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method.\r\n   */\n  dismiss(data, role) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var _a;\n      if (_this5.gestureAnimationDismissing && role !== GESTURE) {\n        return false;\n      }\n      /**\r\n       * Because the canDismiss check below is async,\r\n       * we need to claim a lock before the check happens,\r\n       * in case the dismiss transition does run.\r\n       */\n      const unlock = yield _this5.lockController.lock();\n      /**\r\n       * If a canDismiss handler is responsible\r\n       * for calling the dismiss method, we should\r\n       * not run the canDismiss check again.\r\n       */\n      if (role !== 'handler' && !(yield _this5.checkCanDismiss(data, role))) {\n        unlock();\n        return false;\n      }\n      const {\n        presentingElement\n      } = _this5;\n      /**\r\n       * We need to start the status bar change\r\n       * before the animation so that the change\r\n       * finishes when the dismiss animation does.\r\n       */\n      const hasCardModal = presentingElement !== undefined;\n      if (hasCardModal && getIonMode(_this5) === 'ios') {\n        setCardStatusBarDefault(_this5.statusBarStyle);\n      }\n      /* tslint:disable-next-line */\n      if (typeof window !== 'undefined' && _this5.keyboardOpenCallback) {\n        window.removeEventListener(KEYBOARD_DID_OPEN, _this5.keyboardOpenCallback);\n        _this5.keyboardOpenCallback = undefined;\n      }\n      const dismissed = yield dismiss(_this5, data, role, 'modalLeave', iosLeaveAnimation, mdLeaveAnimation, {\n        presentingEl: presentingElement,\n        currentBreakpoint: (_a = _this5.currentBreakpoint) !== null && _a !== void 0 ? _a : _this5.initialBreakpoint,\n        backdropBreakpoint: _this5.backdropBreakpoint\n      });\n      if (dismissed) {\n        const {\n          delegate\n        } = _this5.getDelegate();\n        yield detachComponent(delegate, _this5.usersElement);\n        writeTask(() => _this5.el.classList.remove('show-modal'));\n        if (_this5.animation) {\n          _this5.animation.destroy();\n        }\n        if (_this5.gesture) {\n          _this5.gesture.destroy();\n        }\n      }\n      _this5.currentBreakpoint = undefined;\n      _this5.animation = undefined;\n      unlock();\n      return dismissed;\n    })();\n  }\n  /**\r\n   * Returns a promise that resolves when the modal did dismiss.\r\n   */\n  onDidDismiss() {\n    return eventMethod(this.el, 'ionModalDidDismiss');\n  }\n  /**\r\n   * Returns a promise that resolves when the modal will dismiss.\r\n   */\n  onWillDismiss() {\n    return eventMethod(this.el, 'ionModalWillDismiss');\n  }\n  /**\r\n   * Move a sheet style modal to a specific breakpoint. The breakpoint value must\r\n   * be a value defined in your `breakpoints` array.\r\n   */\n  setCurrentBreakpoint(breakpoint) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this6.isSheetModal) {\n        printIonWarning('setCurrentBreakpoint is only supported on sheet modals.');\n        return;\n      }\n      if (!_this6.breakpoints.includes(breakpoint)) {\n        printIonWarning(`Attempted to set invalid breakpoint value ${breakpoint}. Please double check that the breakpoint value is part of your defined breakpoints.`);\n        return;\n      }\n      const {\n        currentBreakpoint,\n        moveSheetToBreakpoint,\n        canDismiss,\n        breakpoints,\n        animated\n      } = _this6;\n      if (currentBreakpoint === breakpoint) {\n        return;\n      }\n      if (moveSheetToBreakpoint) {\n        _this6.sheetTransition = moveSheetToBreakpoint({\n          breakpoint,\n          breakpointOffset: 1 - currentBreakpoint,\n          canDismiss: canDismiss !== undefined && canDismiss !== true && breakpoints[0] === 0,\n          animated\n        });\n        yield _this6.sheetTransition;\n        _this6.sheetTransition = undefined;\n      }\n    })();\n  }\n  /**\r\n   * Returns the current breakpoint of a sheet style modal\r\n   */\n  getCurrentBreakpoint() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return _this7.currentBreakpoint;\n    })();\n  }\n  moveToNextBreakpoint() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        breakpoints,\n        currentBreakpoint\n      } = _this8;\n      if (!breakpoints || currentBreakpoint == null) {\n        /**\r\n         * If the modal does not have breakpoints and/or the current\r\n         * breakpoint is not set, we can't move to the next breakpoint.\r\n         */\n        return false;\n      }\n      const allowedBreakpoints = breakpoints.filter(b => b !== 0);\n      const currentBreakpointIndex = allowedBreakpoints.indexOf(currentBreakpoint);\n      const nextBreakpointIndex = (currentBreakpointIndex + 1) % allowedBreakpoints.length;\n      const nextBreakpoint = allowedBreakpoints[nextBreakpointIndex];\n      /**\r\n       * Sets the current breakpoint to the next available breakpoint.\r\n       * If the current breakpoint is the last breakpoint, we set the current\r\n       * breakpoint to the first non-zero breakpoint to avoid dismissing the sheet.\r\n       */\n      yield _this8.setCurrentBreakpoint(nextBreakpoint);\n      return true;\n    })();\n  }\n  render() {\n    const {\n      handle,\n      isSheetModal,\n      presentingElement,\n      htmlAttributes,\n      handleBehavior,\n      inheritedAttributes\n    } = this;\n    const showHandle = handle !== false && isSheetModal;\n    const mode = getIonMode(this);\n    const isCardModal = presentingElement !== undefined && mode === 'ios';\n    const isHandleCycle = handleBehavior === 'cycle';\n    return h(Host, Object.assign({\n      key: 'e4ad28e6e794560d85252aebdca7f4752e4e7e99',\n      \"no-router\": true,\n      tabindex: \"-1\"\n    }, htmlAttributes, {\n      style: {\n        zIndex: `${20000 + this.overlayIndex}`\n      },\n      class: Object.assign({\n        [mode]: true,\n        ['modal-default']: !isCardModal && !isSheetModal,\n        [`modal-card`]: isCardModal,\n        [`modal-sheet`]: isSheetModal,\n        'overlay-hidden': true\n      }, getClassMap(this.cssClass)),\n      onIonBackdropTap: this.onBackdropTap,\n      onIonModalDidPresent: this.onLifecycle,\n      onIonModalWillPresent: this.onLifecycle,\n      onIonModalWillDismiss: this.onLifecycle,\n      onIonModalDidDismiss: this.onLifecycle\n    }), h(\"ion-backdrop\", {\n      key: '6efd67361a062d15488390f9f0d6c0841e541893',\n      ref: el => this.backdropEl = el,\n      visible: this.showBackdrop,\n      tappable: this.backdropDismiss,\n      part: \"backdrop\"\n    }), mode === 'ios' && h(\"div\", {\n      key: '557b1c6b297df75acc80d1350b971e65ace6c343',\n      class: \"modal-shadow\"\n    }), h(\"div\", Object.assign({\n      key: '67f9b27b662303fbaadaee2ae89972caadfd9994',\n      /*\r\n        role and aria-modal must be used on the\r\n        same element. They must also be set inside the\r\n        shadow DOM otherwise ion-button will not be highlighted\r\n        when using VoiceOver: https://bugs.webkit.org/show_bug.cgi?id=247134\r\n      */\n      role: \"dialog\"\n    }, inheritedAttributes, {\n      \"aria-modal\": \"true\",\n      class: \"modal-wrapper ion-overlay-wrapper\",\n      part: \"content\",\n      ref: el => this.wrapperEl = el\n    }), showHandle && h(\"button\", {\n      key: '8f1eecc451b52467a8c3cfe500335cf6254bbfbc',\n      class: \"modal-handle\",\n      // Prevents the handle from receiving keyboard focus when it does not cycle\n      tabIndex: !isHandleCycle ? -1 : 0,\n      \"aria-label\": \"Activate to adjust the size of the dialog overlaying the screen\",\n      onClick: isHandleCycle ? this.onHandleClick : undefined,\n      part: \"handle\"\n    }), h(\"slot\", {\n      key: 'cdc923404f01a14b9071a434c68547da3b22c71e'\n    })));\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"isOpen\": [\"onIsOpenChange\"],\n      \"trigger\": [\"triggerChanged\"]\n    };\n  }\n};\nconst LIFECYCLE_MAP = {\n  ionModalDidPresent: 'ionViewDidEnter',\n  ionModalWillPresent: 'ionViewWillEnter',\n  ionModalWillDismiss: 'ionViewWillLeave',\n  ionModalDidDismiss: 'ionViewDidLeave'\n};\nModal.style = {\n  ios: IonModalIosStyle0,\n  md: IonModalMdStyle0\n};\nexport { Modal as ion_modal };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}