{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/santiago.cardenas/Desktop/Proyectos/Proyecto de grado/BurstCar/front/burstCarFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as mapboxgl from 'mapbox-gl';\nimport { environment } from 'src/environment/environment';\nimport { Geolocation } from '@capacitor/geolocation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = [\"mapa\"];\nexport let MapaSelectorComponent = /*#__PURE__*/(() => {\n  class MapaSelectorComponent {\n    ngAfterViewInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        mapboxgl.accessToken = environment.mapboxAccessToken;\n        try {\n          const position = yield Geolocation.getCurrentPosition();\n          const coords = [position.coords.longitude, position.coords.latitude];\n          _this.inicializarMapa(coords);\n        } catch (error) {\n          console.error('Error obteniendo ubicación:', error);\n        }\n      })();\n    }\n    inicializarMapa(coords) {\n      this.mapa = new mapboxgl.Map({\n        container: this.mapaContainer.nativeElement,\n        style: 'mapbox://styles/mapbox/streets-v12',\n        center: coords,\n        zoom: 14\n      });\n      this.marker = new mapboxgl.Marker({\n        draggable: true\n      }).setLngLat(coords).addTo(this.mapa);\n      this.actualizarFormulario(coords[1], coords[0]);\n      this.marker.on('dragend', () => {\n        const {\n          lng,\n          lat\n        } = this.marker.getLngLat();\n        this.actualizarFormulario(lat, lng);\n      });\n      this.mapa.on('click', e => {\n        const {\n          lng,\n          lat\n        } = e.lngLat;\n        this.marker.setLngLat([lng, lat]);\n        this.actualizarFormulario(lat, lng);\n      });\n    }\n    actualizarFormulario(lat, lng) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.formGroup.patchValue({\n          latitud: lat,\n          longitud: lng\n        });\n        yield _this2.obtenerDireccionDesdeCoordenadas(lat, lng);\n      })();\n    }\n    buscarDireccion(termino) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        if (!termino.trim()) return;\n        const response = yield fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(termino)}.json?access_token=${environment.mapboxAccessToken}`);\n        const data = yield response.json();\n        if (data.features.length === 0) return;\n        const [lng, lat] = data.features[0].center;\n        _this3.mapa.flyTo({\n          center: [lng, lat],\n          zoom: 16\n        });\n        if (_this3.marker) {\n          _this3.marker.setLngLat([lng, lat]);\n        } else {\n          _this3.marker = new mapboxgl.Marker({\n            draggable: true\n          }).setLngLat([lng, lat]).addTo(_this3.mapa);\n        }\n        _this3.actualizarFormulario(lat, lng);\n      })();\n    }\n    obtenerDireccionDesdeCoordenadas(lat, lng) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        const response = yield fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${environment.mapboxAccessToken}`);\n        const data = yield response.json();\n        const features = data.features;\n        const pais = features.find(f => f.place_type.includes('country'))?.text || '';\n        const departamento = features.find(f => f.place_type.includes('region'))?.text || '';\n        const ciudad = features.find(f => f.place_type.includes('place'))?.text || '';\n        const corregimiento = features.find(f => f.place_type.includes('locality') || f.place_type.includes('district') || f.place_type.includes('neighborhood'))?.text || '';\n        const viaFeature = features.find(f => f.place_type.includes('address'));\n        let nombreVia = '',\n          numeroVia = '',\n          direccion = '';\n        if (viaFeature) {\n          const partes = viaFeature.text.split(' ');\n          nombreVia = partes[0] || '';\n          numeroVia = partes[1] || '';\n          const regexDireccion = /(\\d+[a-zA-Z]?)\\s+(\\d+[a-zA-Z]?)/;\n          const match = regexDireccion.exec(viaFeature.place_name);\n          direccion = match ? `${match[1]}-${match[2]}` : '';\n        }\n        _this4.formGroup.patchValue({\n          nombrePais: pais,\n          nombreDepartamento: departamento,\n          nombreCiudad: ciudad,\n          nombreCorregimiento: corregimiento,\n          nombreVia: nombreVia,\n          numeroVia: numeroVia,\n          direccion: direccion\n        });\n      })();\n    }\n    redibujarMapa() {\n      setTimeout(() => {\n        if (this.mapa) {\n          this.mapa.resize();\n        }\n      }, 300);\n    }\n    static {\n      this.ɵfac = function MapaSelectorComponent_Factory(t) {\n        return new (t || MapaSelectorComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: MapaSelectorComponent,\n        selectors: [[\"app-mapa-selector\"]],\n        viewQuery: function MapaSelectorComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapaContainer = _t.first);\n          }\n        },\n        inputs: {\n          formGroup: \"formGroup\"\n        },\n        decls: 6,\n        vars: 1,\n        consts: [[\"mapa\", \"\"], [\"position\", \"stacked\"], [\"debounce\", \"500\", 3, \"ngModelChange\", \"ionChange\", \"ngModel\"], [\"id\", \"mapa\", 2, \"width\", \"100%\", \"height\", \"300px\"]],\n        template: function MapaSelectorComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\", 1);\n            i0.ɵɵtext(2, \"Buscar direcci\\u00F3n\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"ion-input\", 2);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function MapaSelectorComponent_Template_ion_input_ngModelChange_3_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.busqueda, $event) || (ctx.busqueda = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵlistener(\"ionChange\", function MapaSelectorComponent_Template_ion_input_ionChange_3_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.buscarUbicacionPorTexto());\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(4, \"div\", 3, 0);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.busqueda);\n          }\n        },\n        dependencies: [i1.IonInput, i1.IonItem, i1.IonLabel, i1.TextValueAccessor, i2.NgControlStatus, i2.NgModel],\n        styles: [\"#mapa[_ngcontent-%COMP%]{border:2px solid #6c8f6d;border-radius:12px}\"]\n      });\n    }\n  }\n  return MapaSelectorComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}