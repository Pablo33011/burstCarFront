{"ast":null,"code":"// index.ts\nimport { feature, featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nfunction combine(fc) {\n  var groups = {\n    MultiPoint: {\n      coordinates: [],\n      properties: []\n    },\n    MultiLineString: {\n      coordinates: [],\n      properties: []\n    },\n    MultiPolygon: {\n      coordinates: [],\n      properties: []\n    }\n  };\n  featureEach(fc, feature2 => {\n    var _a;\n    switch ((_a = feature2.geometry) == null ? void 0 : _a.type) {\n      case \"Point\":\n        groups.MultiPoint.coordinates.push(feature2.geometry.coordinates);\n        groups.MultiPoint.properties.push(feature2.properties);\n        break;\n      case \"MultiPoint\":\n        groups.MultiPoint.coordinates.push(...feature2.geometry.coordinates);\n        groups.MultiPoint.properties.push(feature2.properties);\n        break;\n      case \"LineString\":\n        groups.MultiLineString.coordinates.push(feature2.geometry.coordinates);\n        groups.MultiLineString.properties.push(feature2.properties);\n        break;\n      case \"MultiLineString\":\n        groups.MultiLineString.coordinates.push(...feature2.geometry.coordinates);\n        groups.MultiLineString.properties.push(feature2.properties);\n        break;\n      case \"Polygon\":\n        groups.MultiPolygon.coordinates.push(feature2.geometry.coordinates);\n        groups.MultiPolygon.properties.push(feature2.properties);\n        break;\n      case \"MultiPolygon\":\n        groups.MultiPolygon.coordinates.push(...feature2.geometry.coordinates);\n        groups.MultiPolygon.properties.push(feature2.properties);\n        break;\n      default:\n        break;\n    }\n  });\n  return featureCollection(Object.keys(groups).filter(function (key) {\n    return groups[key].coordinates.length;\n  }).sort().map(function (key) {\n    var geometry = {\n      type: key,\n      coordinates: groups[key].coordinates\n    };\n    var properties = {\n      collectedProperties: groups[key].properties\n    };\n    return feature(geometry, properties);\n  }));\n}\nvar turf_combine_default = combine;\nexport { combine, turf_combine_default as default };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}