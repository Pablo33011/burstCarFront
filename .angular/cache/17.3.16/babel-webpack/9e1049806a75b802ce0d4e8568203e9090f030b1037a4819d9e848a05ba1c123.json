{"ast":null,"code":"// index.ts\nimport { booleanPointOnLine } from \"@turf/boolean-point-on-line\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { getGeom } from \"@turf/invariant\";\nfunction booleanTouches(feature1, feature2) {\n  var geom1 = getGeom(feature1);\n  var geom2 = getGeom(feature2);\n  var type1 = geom1.type;\n  var type2 = geom2.type;\n  switch (type1) {\n    case \"Point\":\n      switch (type2) {\n        case \"LineString\":\n          return isPointOnLineEnd(geom1, geom2);\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n            if (isPointOnLineEnd(geom1, {\n              type: \"LineString\",\n              coordinates: geom2.coordinates[ii]\n            })) foundTouchingPoint = true;\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (booleanPointOnLine(geom1, {\n              type: \"LineString\",\n              coordinates: geom2.coordinates[i]\n            })) return true;\n          }\n          return false;\n        case \"MultiPolygon\":\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[i].length; ii++) {\n              if (booleanPointOnLine(geom1, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[i][ii]\n              })) return true;\n            }\n          }\n          return false;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPoint\":\n      switch (type2) {\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (isPointOnLineEnd({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, geom2)) foundTouchingPoint = true;\n            }\n            if (booleanPointOnLine({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreEndVertices: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (isPointOnLineEnd({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[ii]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                ignoreEndVertices: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[ii][0]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                type: \"Polygon\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"LineString\":\n      switch (type2) {\n        case \"Point\":\n          return isPointOnLineEnd(geom2, geom1);\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (isPointOnLineEnd({\n                type: \"Point\",\n                coordinates: geom2.coordinates[i]\n              }, geom1)) foundTouchingPoint = true;\n            }\n            if (booleanPointOnLine({\n              type: \"Point\",\n              coordinates: geom2.coordinates[i]\n            }, geom1, {\n              ignoreEndVertices: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var endMatch = false;\n          if (isPointOnLineEnd({\n            type: \"Point\",\n            coordinates: geom1.coordinates[0]\n          }, geom2)) endMatch = true;\n          if (isPointOnLineEnd({\n            type: \"Point\",\n            coordinates: geom1.coordinates[geom1.coordinates.length - 1]\n          }, geom2)) endMatch = true;\n          if (endMatch === false) return false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (booleanPointOnLine({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreEndVertices: true\n            })) return false;\n          }\n          return endMatch;\n        case \"MultiLineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (isPointOnLineEnd({\n              type: \"Point\",\n              coordinates: geom1.coordinates[0]\n            }, {\n              type: \"LineString\",\n              coordinates: geom2.coordinates[i]\n            })) endMatch = true;\n            if (isPointOnLineEnd({\n              type: \"Point\",\n              coordinates: geom1.coordinates[geom1.coordinates.length - 1]\n            }, {\n              type: \"LineString\",\n              coordinates: geom2.coordinates[i]\n            })) endMatch = true;\n            for (var ii = 0; ii < geom1.coordinates[i].length; ii++) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[ii]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[i]\n              }, {\n                ignoreEndVertices: true\n              })) return false;\n            }\n          }\n          return endMatch;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[ii][0]\n                })) foundTouchingPoint = true;\n              }\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiLineString\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (isPointOnLineEnd(geom2, {\n              type: \"LineString\",\n              coordinates: geom1.coordinates[i]\n            })) return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (isPointOnLineEnd({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom1.coordinates[ii]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[ii]\n              }, {\n                ignoreEndVertices: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (isPointOnLineEnd({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i][0]\n            }, geom2)) endMatch = true;\n            if (isPointOnLineEnd({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i][geom1.coordinates[i].length - 1]\n            }, geom2)) endMatch = true;\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                ignoreEndVertices: true\n              })) return false;\n            }\n          }\n          return endMatch;\n        case \"MultiLineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (isPointOnLineEnd({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i][0]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[ii]\n              })) endMatch = true;\n              if (isPointOnLineEnd({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i][geom1.coordinates[i].length - 1]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[ii]\n              })) endMatch = true;\n              for (var iii = 0; iii < geom1.coordinates[i].length; iii++) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i][iii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[ii]\n                }, {\n                  ignoreEndVertices: true\n                })) return false;\n              }\n            }\n          }\n          return endMatch;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom1.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i][ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[0]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i][ii]\n              }, geom2, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates.length; ii++) {\n              for (var iii = 0; iii < geom1.coordinates[ii].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (booleanPointOnLine({\n                    type: \"Point\",\n                    coordinates: geom1.coordinates[ii][iii]\n                  }, {\n                    type: \"LineString\",\n                    coordinates: geom2.coordinates[0][i]\n                  })) foundTouchingPoint = true;\n                }\n                if (booleanPointInPolygon({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[ii][iii]\n                }, {\n                  type: \"Polygon\",\n                  coordinates: [geom2.coordinates[0][i]]\n                }, {\n                  ignoreBoundary: true\n                })) return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"Polygon\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (booleanPointOnLine(geom2, {\n              type: \"LineString\",\n              coordinates: geom1.coordinates[i]\n            })) return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom2.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom2.coordinates[i]\n            }, geom1, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom2.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom2.coordinates[i]\n            }, geom1, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[i].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[i][ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom1.coordinates[0]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom2.coordinates[i][ii]\n              }, geom1, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[0][i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom1.coordinates[0][i]\n            }, geom2, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates[0].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[0][ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[0][i]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom1.coordinates[0][ii]\n              }, {\n                type: \"Polygon\",\n                coordinates: geom2.coordinates[0][i]\n              }, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPolygon\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            if (booleanPointOnLine(geom2, {\n              type: \"LineString\",\n              coordinates: geom1.coordinates[0][i]\n            })) return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom1.coordinates[0][i]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                type: \"Polygon\",\n                coordinates: geom1.coordinates[0][i]\n              }, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom1.coordinates[0][i]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                type: \"Polygon\",\n                coordinates: geom1.coordinates[0][i]\n              }, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              for (var iii = 0; iii < geom2.coordinates[ii].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (booleanPointOnLine({\n                    type: \"Point\",\n                    coordinates: geom2.coordinates[ii][iii]\n                  }, {\n                    type: \"LineString\",\n                    coordinates: geom1.coordinates[i][0]\n                  })) foundTouchingPoint = true;\n                }\n                if (booleanPointInPolygon({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[ii][iii]\n                }, {\n                  type: \"Polygon\",\n                  coordinates: [geom1.coordinates[i][0]]\n                }, {\n                  ignoreBoundary: true\n                })) return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates[0][i].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[0][i][ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[0]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom1.coordinates[0][i][ii]\n              }, geom2, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[0].length; ii++) {\n              for (var iii = 0; iii < geom1.coordinates[0].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (booleanPointOnLine({\n                    type: \"Point\",\n                    coordinates: geom1.coordinates[0][i][iii]\n                  }, {\n                    type: \"LineString\",\n                    coordinates: geom2.coordinates[0][ii]\n                  })) foundTouchingPoint = true;\n                }\n                if (booleanPointInPolygon({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[0][i][iii]\n                }, {\n                  type: \"Polygon\",\n                  coordinates: geom2.coordinates[0][ii]\n                }, {\n                  ignoreBoundary: true\n                })) return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    default:\n      throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n  }\n}\nfunction isPointOnLineEnd(point, line) {\n  if (compareCoords(line.coordinates[0], point.coordinates)) return true;\n  if (compareCoords(line.coordinates[line.coordinates.length - 1], point.coordinates)) return true;\n  return false;\n}\nfunction compareCoords(pair1, pair2) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\nvar turf_boolean_touches_default = booleanTouches;\nexport { booleanTouches, turf_boolean_touches_default as default };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}