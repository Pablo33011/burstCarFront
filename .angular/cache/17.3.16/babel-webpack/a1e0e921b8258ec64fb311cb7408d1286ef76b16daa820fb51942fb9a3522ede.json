{"ast":null,"code":"// index.ts\nimport { booleanIntersects as intersect } from \"@turf/boolean-intersects\";\nimport { convertLength, featureCollection, polygon } from \"@turf/helpers\";\nfunction rectangleGrid(bbox, cellWidth, cellHeight, options = {}) {\n  const results = [];\n  const west = bbox[0];\n  const south = bbox[1];\n  const east = bbox[2];\n  const north = bbox[3];\n  const bboxWidth = east - west;\n  const cellWidthDeg = convertLength(cellWidth, options.units, \"degrees\");\n  const bboxHeight = north - south;\n  const cellHeightDeg = convertLength(cellHeight, options.units, \"degrees\");\n  const columns = Math.floor(Math.abs(bboxWidth) / cellWidthDeg);\n  const rows = Math.floor(Math.abs(bboxHeight) / cellHeightDeg);\n  const deltaX = (bboxWidth - columns * cellWidthDeg) / 2;\n  const deltaY = (bboxHeight - rows * cellHeightDeg) / 2;\n  let currentX = west + deltaX;\n  for (let column = 0; column < columns; column++) {\n    let currentY = south + deltaY;\n    for (let row = 0; row < rows; row++) {\n      const cellPoly = polygon([[[currentX, currentY], [currentX, currentY + cellHeightDeg], [currentX + cellWidthDeg, currentY + cellHeightDeg], [currentX + cellWidthDeg, currentY], [currentX, currentY]]], options.properties);\n      if (options.mask) {\n        if (intersect(options.mask, cellPoly)) {\n          results.push(cellPoly);\n        }\n      } else {\n        results.push(cellPoly);\n      }\n      currentY += cellHeightDeg;\n    }\n    currentX += cellWidthDeg;\n  }\n  return featureCollection(results);\n}\nvar turf_rectangle_grid_default = rectangleGrid;\nexport { turf_rectangle_grid_default as default, rectangleGrid };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}