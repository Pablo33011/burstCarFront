{"ast":null,"code":"import { hasOwnProperty } from \"./object.js\";\nexport default function (objects, bbox, n) {\n  var x0 = bbox[0],\n    y0 = bbox[1],\n    x1 = bbox[2],\n    y1 = bbox[3],\n    kx = x1 - x0 ? (n - 1) / (x1 - x0) : 1,\n    ky = y1 - y0 ? (n - 1) / (y1 - y0) : 1;\n  function quantizePoint(input) {\n    return [Math.round((input[0] - x0) * kx), Math.round((input[1] - y0) * ky)];\n  }\n  function quantizePoints(input, m) {\n    var i = -1,\n      j = 0,\n      n = input.length,\n      output = new Array(n),\n      // pessimistic\n      pi,\n      px,\n      py,\n      x,\n      y;\n    while (++i < n) {\n      pi = input[i];\n      x = Math.round((pi[0] - x0) * kx);\n      y = Math.round((pi[1] - y0) * ky);\n      if (x !== px || y !== py) output[j++] = [px = x, py = y]; // non-coincident points\n    }\n    output.length = j;\n    while (j < m) j = output.push([output[0][0], output[0][1]]);\n    return output;\n  }\n  function quantizeLine(input) {\n    return quantizePoints(input, 2);\n  }\n  function quantizeRing(input) {\n    return quantizePoints(input, 4);\n  }\n  function quantizePolygon(input) {\n    return input.map(quantizeRing);\n  }\n  function quantizeGeometry(o) {\n    if (o != null && hasOwnProperty.call(quantizeGeometryType, o.type)) quantizeGeometryType[o.type](o);\n  }\n  var quantizeGeometryType = {\n    GeometryCollection: function (o) {\n      o.geometries.forEach(quantizeGeometry);\n    },\n    Point: function (o) {\n      o.coordinates = quantizePoint(o.coordinates);\n    },\n    MultiPoint: function (o) {\n      o.coordinates = o.coordinates.map(quantizePoint);\n    },\n    LineString: function (o) {\n      o.arcs = quantizeLine(o.arcs);\n    },\n    MultiLineString: function (o) {\n      o.arcs = o.arcs.map(quantizeLine);\n    },\n    Polygon: function (o) {\n      o.arcs = quantizePolygon(o.arcs);\n    },\n    MultiPolygon: function (o) {\n      o.arcs = o.arcs.map(quantizePolygon);\n    }\n  };\n  for (var key in objects) {\n    quantizeGeometry(objects[key]);\n  }\n  return {\n    scale: [1 / kx, 1 / ky],\n    translate: [x0, y0]\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}