{"ast":null,"code":"// index.ts\nimport { centroid } from \"@turf/centroid\";\nimport { getCoord } from \"@turf/invariant\";\nimport { featureEach } from \"@turf/meta\";\nfunction pNormDistance(feature1, feature2, p = 2) {\n  const coordinate1 = getCoord(feature1);\n  const coordinate2 = getCoord(feature2);\n  const xDiff = coordinate1[0] - coordinate2[0];\n  const yDiff = coordinate1[1] - coordinate2[1];\n  if (p === 1) {\n    return Math.abs(xDiff) + Math.abs(yDiff);\n  }\n  return Math.pow(Math.pow(xDiff, p) + Math.pow(yDiff, p), 1 / p);\n}\nfunction distanceWeight(fc, options) {\n  var _a, _b;\n  options = options || {};\n  const threshold = options.threshold || 1e4;\n  const p = options.p || 2;\n  const binary = (_a = options.binary) != null ? _a : false;\n  const alpha = options.alpha || -1;\n  const rowTransform = (_b = options.standardization) != null ? _b : false;\n  const features = [];\n  featureEach(fc, feature => {\n    features.push(centroid(feature));\n  });\n  const weights = [];\n  for (let i = 0; i < features.length; i++) {\n    weights[i] = [];\n  }\n  for (let i = 0; i < features.length; i++) {\n    for (let j = i; j < features.length; j++) {\n      if (i === j) {\n        weights[i][j] = 0;\n      }\n      const dis = pNormDistance(features[i], features[j], p);\n      weights[i][j] = dis;\n      weights[j][i] = dis;\n    }\n  }\n  for (let i = 0; i < features.length; i++) {\n    for (let j = 0; j < features.length; j++) {\n      const dis = weights[i][j];\n      if (dis === 0) {\n        continue;\n      }\n      if (binary) {\n        if (dis <= threshold) {\n          weights[i][j] = 1;\n        } else {\n          weights[i][j] = 0;\n        }\n      } else {\n        if (dis <= threshold) {\n          weights[i][j] = Math.pow(dis, alpha);\n        } else {\n          weights[i][j] = 0;\n        }\n      }\n    }\n  }\n  if (rowTransform) {\n    for (let i = 0; i < features.length; i++) {\n      const rowSum = weights[i].reduce((sum, currentVal) => {\n        return sum + currentVal;\n      }, 0);\n      for (let j = 0; j < features.length; j++) {\n        weights[i][j] = weights[i][j] / rowSum;\n      }\n    }\n  }\n  return weights;\n}\nvar turf_distance_weight_default = distanceWeight;\nexport { turf_distance_weight_default as default, distanceWeight, pNormDistance };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}