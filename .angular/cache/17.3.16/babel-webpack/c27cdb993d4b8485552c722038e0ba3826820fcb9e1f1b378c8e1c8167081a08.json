{"ast":null,"code":"// index.ts\nimport { coordEach } from \"@turf/meta\";\nimport { isObject } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { clone } from \"@turf/clone\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nfunction transformTranslate(geojson, distance, direction, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var units = options.units;\n  var zTranslation = options.zTranslation;\n  var mutate = options.mutate;\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (distance === void 0 || distance === null || isNaN(distance)) throw new Error(\"distance is required\");\n  if (zTranslation && typeof zTranslation !== \"number\" && isNaN(zTranslation)) throw new Error(\"zTranslation is not a number\");\n  zTranslation = zTranslation !== void 0 ? zTranslation : 0;\n  if (distance === 0 && zTranslation === 0) return geojson;\n  if (direction === void 0 || direction === null || isNaN(direction)) throw new Error(\"direction is required\");\n  if (distance < 0) {\n    distance = -distance;\n    direction = direction + 180;\n  }\n  if (mutate === false || mutate === void 0) geojson = clone(geojson);\n  coordEach(geojson, function (pointCoords) {\n    var newCoords = getCoords(rhumbDestination(pointCoords, distance, direction, {\n      units\n    }));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n    if (zTranslation && pointCoords.length === 3) pointCoords[2] += zTranslation;\n  });\n  return geojson;\n}\nvar turf_transform_translate_default = transformTranslate;\nexport { turf_transform_translate_default as default, transformTranslate };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}