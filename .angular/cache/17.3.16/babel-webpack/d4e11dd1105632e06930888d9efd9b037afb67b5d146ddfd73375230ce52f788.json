{"ast":null,"code":"// index.ts\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { pointToLineDistance } from \"@turf/point-to-line-distance\";\nimport { polygonToLine } from \"@turf/polygon-to-line\";\nimport { getGeom } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport { polygon } from \"@turf/helpers\";\nfunction pointToPolygonDistance(point, polygonOrMultiPolygon, options = {}) {\n  var _a, _b;\n  const method = (_a = options.method) != null ? _a : \"geodesic\";\n  const units = (_b = options.units) != null ? _b : \"kilometers\";\n  if (!point) throw new Error(\"point is required\");\n  if (!polygonOrMultiPolygon) throw new Error(\"polygon or multi-polygon is required\");\n  const geom = getGeom(polygonOrMultiPolygon);\n  if (geom.type === \"MultiPolygon\") {\n    const distances = geom.coordinates.map(coords => pointToPolygonDistance(point, polygon(coords), {\n      method,\n      units\n    }));\n    return Math.min(...distances.map(Math.abs)) * (booleanPointInPolygon(point, polygonOrMultiPolygon) ? -1 : 1);\n  }\n  if (geom.coordinates.length > 1) {\n    const [exteriorDistance, ...interiorDistances] = geom.coordinates.map(coords => pointToPolygonDistance(point, polygon([coords]), {\n      method,\n      units\n    }));\n    if (exteriorDistance >= 0) return exteriorDistance;\n    const smallestInteriorDistance = Math.min(...interiorDistances);\n    if (smallestInteriorDistance < 0) return Math.abs(smallestInteriorDistance);\n    return Math.min(smallestInteriorDistance, Math.abs(exteriorDistance));\n  }\n  const lines = polygonToLine(geom);\n  let minDistance = Infinity;\n  flattenEach(lines, feature => {\n    minDistance = Math.min(minDistance, pointToLineDistance(point, feature, {\n      method,\n      units\n    }));\n  });\n  return booleanPointInPolygon(point, geom) ? -minDistance : minDistance;\n}\nvar turf_point_to_polygon_distance_default = pointToPolygonDistance;\nexport { turf_point_to_polygon_distance_default as default, pointToPolygonDistance };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}