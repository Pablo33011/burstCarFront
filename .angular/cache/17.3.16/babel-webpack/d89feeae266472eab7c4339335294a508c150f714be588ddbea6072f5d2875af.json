{"ast":null,"code":"// index.ts\nimport { feature, featureCollection, point } from \"@turf/helpers\";\n\n// lib/sweepline-intersections-export.ts\nimport lib from \"sweepline-intersections\";\nvar sweeplineIntersections = lib;\n\n// index.ts\nfunction lineIntersect(line1, line2, options = {}) {\n  const {\n    removeDuplicates = true,\n    ignoreSelfIntersections = true\n  } = options;\n  let features = [];\n  if (line1.type === \"FeatureCollection\") features = features.concat(line1.features);else if (line1.type === \"Feature\") features.push(line1);else if (line1.type === \"LineString\" || line1.type === \"Polygon\" || line1.type === \"MultiLineString\" || line1.type === \"MultiPolygon\") {\n    features.push(feature(line1));\n  }\n  if (line2.type === \"FeatureCollection\") features = features.concat(line2.features);else if (line2.type === \"Feature\") features.push(line2);else if (line2.type === \"LineString\" || line2.type === \"Polygon\" || line2.type === \"MultiLineString\" || line2.type === \"MultiPolygon\") {\n    features.push(feature(line2));\n  }\n  const intersections = sweeplineIntersections(featureCollection(features), ignoreSelfIntersections);\n  let results = [];\n  if (removeDuplicates) {\n    const unique = {};\n    intersections.forEach(intersection => {\n      const key = intersection.join(\",\");\n      if (!unique[key]) {\n        unique[key] = true;\n        results.push(intersection);\n      }\n    });\n  } else {\n    results = intersections;\n  }\n  return featureCollection(results.map(r => point(r)));\n}\nvar turf_line_intersect_default = lineIntersect;\nexport { turf_line_intersect_default as default, lineIntersect };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}