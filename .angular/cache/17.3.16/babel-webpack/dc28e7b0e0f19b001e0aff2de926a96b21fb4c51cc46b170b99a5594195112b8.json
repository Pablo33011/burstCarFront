{"ast":null,"code":"// index.ts\nimport { featureCollection, polygon } from \"@turf/helpers\";\nfunction tin(points, z) {\n  let isPointZ = false;\n  return featureCollection(triangulate(points.features.map(p => {\n    const point = {\n      x: p.geometry.coordinates[0],\n      y: p.geometry.coordinates[1]\n    };\n    if (z) {\n      point.z = p.properties[z];\n    } else if (p.geometry.coordinates.length === 3) {\n      isPointZ = true;\n      point.z = p.geometry.coordinates[2];\n    }\n    return point;\n  })).map(triangle => {\n    const a = [triangle.a.x, triangle.a.y];\n    const b = [triangle.b.x, triangle.b.y];\n    const c = [triangle.c.x, triangle.c.y];\n    let properties = {};\n    if (isPointZ) {\n      a.push(triangle.a.z);\n      b.push(triangle.b.z);\n      c.push(triangle.c.z);\n    } else {\n      properties = {\n        a: triangle.a.z,\n        b: triangle.b.z,\n        c: triangle.c.z\n      };\n    }\n    return polygon([[a, b, c, a]], properties);\n  }));\n}\nvar Triangle = class {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    const A = b.x - a.x;\n    const B = b.y - a.y;\n    const C = c.x - a.x;\n    const D = c.y - a.y;\n    const E = A * (a.x + b.x) + B * (a.y + b.y);\n    const F = C * (a.x + c.x) + D * (a.y + c.y);\n    const G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n    let dx;\n    let dy;\n    this.x = (D * E - B * F) / G;\n    this.y = (A * F - C * E) / G;\n    dx = this.x - a.x;\n    dy = this.y - a.y;\n    this.r = dx * dx + dy * dy;\n  }\n};\nfunction byX(a, b) {\n  return b.x - a.x;\n}\nfunction dedup(edges) {\n  let j = edges.length;\n  let a;\n  let b;\n  let i;\n  let m;\n  let n;\n  outer: while (j) {\n    b = edges[--j];\n    a = edges[--j];\n    i = j;\n    while (i) {\n      n = edges[--i];\n      m = edges[--i];\n      if (a === m && b === n || a === n && b === m) {\n        edges.splice(j, 2);\n        edges.splice(i, 2);\n        j -= 2;\n        continue outer;\n      }\n    }\n  }\n}\nfunction triangulate(vertices) {\n  if (vertices.length < 3) {\n    return [];\n  }\n  vertices.sort(byX);\n  let i = vertices.length - 1;\n  const xmin = vertices[i].x;\n  const xmax = vertices[0].x;\n  let ymin = vertices[i].y;\n  let ymax = ymin;\n  const epsilon = 1e-12;\n  let a;\n  let b;\n  let c;\n  let A;\n  let B;\n  let G;\n  while (i--) {\n    if (vertices[i].y < ymin) {\n      ymin = vertices[i].y;\n    }\n    if (vertices[i].y > ymax) {\n      ymax = vertices[i].y;\n    }\n  }\n  let dx = xmax - xmin;\n  let dy = ymax - ymin;\n  const dmax = dx > dy ? dx : dy;\n  const xmid = (xmax + xmin) * 0.5;\n  const ymid = (ymax + ymin) * 0.5;\n  const open = [new Triangle({\n    __sentinel: true,\n    x: xmid - 20 * dmax,\n    y: ymid - dmax\n  }, {\n    __sentinel: true,\n    x: xmid,\n    y: ymid + 20 * dmax\n  }, {\n    __sentinel: true,\n    x: xmid + 20 * dmax,\n    y: ymid - dmax\n  })];\n  const closed = [];\n  const edges = [];\n  let j;\n  i = vertices.length;\n  while (i--) {\n    edges.length = 0;\n    j = open.length;\n    while (j--) {\n      dx = vertices[i].x - open[j].x;\n      if (dx > 0 && dx * dx > open[j].r) {\n        closed.push(open[j]);\n        open.splice(j, 1);\n        continue;\n      }\n      dy = vertices[i].y - open[j].y;\n      if (dx * dx + dy * dy > open[j].r) {\n        continue;\n      }\n      edges.push(open[j].a, open[j].b, open[j].b, open[j].c, open[j].c, open[j].a);\n      open.splice(j, 1);\n    }\n    dedup(edges);\n    j = edges.length;\n    while (j) {\n      b = edges[--j];\n      a = edges[--j];\n      c = vertices[i];\n      A = b.x - a.x;\n      B = b.y - a.y;\n      G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n      if (Math.abs(G) > epsilon) {\n        open.push(new Triangle(a, b, c));\n      }\n    }\n  }\n  Array.prototype.push.apply(closed, open);\n  i = closed.length;\n  while (i--) {\n    if (closed[i].a.__sentinel || closed[i].b.__sentinel || closed[i].c.__sentinel) {\n      closed.splice(i, 1);\n    }\n  }\n  return closed;\n}\nvar turf_tin_default = tin;\nexport { turf_tin_default as default, tin };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}