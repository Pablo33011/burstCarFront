{"ast":null,"code":"// index.ts\nimport { centroid } from \"@turf/centroid\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { clone } from \"@turf/clone\";\nimport { coordEach } from \"@turf/meta\";\nimport { getCoords } from \"@turf/invariant\";\nimport { isObject } from \"@turf/helpers\";\nfunction transformRotate(geojson, angle, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const pivot = options.pivot;\n  const mutate = options.mutate;\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (angle === void 0 || angle === null || isNaN(angle)) throw new Error(\"angle is required\");\n  if (angle === 0) return geojson;\n  const pivotCoord = pivot != null ? pivot : centroid(geojson);\n  if (mutate === false || mutate === void 0) geojson = clone(geojson);\n  coordEach(geojson, function (pointCoords) {\n    const initialAngle = rhumbBearing(pivotCoord, pointCoords);\n    const finalAngle = initialAngle + angle;\n    const distance = rhumbDistance(pivotCoord, pointCoords);\n    const newCoords = getCoords(rhumbDestination(pivotCoord, distance, finalAngle));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\nvar turf_transform_rotate_default = transformRotate;\nexport { turf_transform_rotate_default as default, transformRotate };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}