{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/santiago.cardenas/Desktop/Proyectos/Proyecto de grado/BurstCar/front/burstCarFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { c as componentOnReady } from './helpers-be245865.js';\n\n// TODO(FW-2832): types\nconst attachComponent = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (delegate, container, component, cssClasses, componentProps, inline) {\n    var _a;\n    if (delegate) {\n      return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (!inline && typeof component !== 'string' && !(component instanceof HTMLElement)) {\n      throw new Error('framework delegate is missing');\n    }\n    const el = typeof component === 'string' ? (_a = container.ownerDocument) === null || _a === void 0 ? void 0 : _a.createElement(component) : component;\n    if (cssClasses) {\n      cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n      Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    yield new Promise(resolve => componentOnReady(el, resolve));\n    return el;\n  });\n  return function attachComponent(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n    element.remove();\n  }\n  return Promise.resolve();\n};\nconst CoreDelegate = () => {\n  let BaseComponent;\n  let Reference;\n  const attachViewToDom = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (parentElement, userComponent, userComponentProps = {}, cssClasses = []) {\n      var _a, _b;\n      BaseComponent = parentElement;\n      let ChildComponent;\n      /**\r\n       * If passing in a component via the `component` props\r\n       * we need to append it inside of our overlay component.\r\n       */\n      if (userComponent) {\n        /**\r\n         * If passing in the tag name, create\r\n         * the element otherwise just get a reference\r\n         * to the component.\r\n         */\n        const el = typeof userComponent === 'string' ? (_a = BaseComponent.ownerDocument) === null || _a === void 0 ? void 0 : _a.createElement(userComponent) : userComponent;\n        /**\r\n         * Add any css classes passed in\r\n         * via the cssClasses prop on the overlay.\r\n         */\n        cssClasses.forEach(c => el.classList.add(c));\n        /**\r\n         * Add any props passed in\r\n         * via the componentProps prop on the overlay.\r\n         */\n        Object.assign(el, userComponentProps);\n        /**\r\n         * Finally, append the component\r\n         * inside of the overlay component.\r\n         */\n        BaseComponent.appendChild(el);\n        ChildComponent = el;\n        yield new Promise(resolve => componentOnReady(el, resolve));\n      } else if (BaseComponent.children.length > 0 && (BaseComponent.tagName === 'ION-MODAL' || BaseComponent.tagName === 'ION-POPOVER')) {\n        /**\r\n         * The delegate host wrapper el is only needed for modals and popovers\r\n         * because they allow the dev to provide custom content to the overlay.\r\n         */\n        const root = ChildComponent = BaseComponent.children[0];\n        if (!root.classList.contains('ion-delegate-host')) {\n          /**\r\n           * If the root element is not a delegate host, it means\r\n           * that the overlay has not been presented yet and we need\r\n           * to create the containing element with the specified classes.\r\n           */\n          const el = (_b = BaseComponent.ownerDocument) === null || _b === void 0 ? void 0 : _b.createElement('div');\n          // Add a class to track if the root element was created by the delegate.\n          el.classList.add('ion-delegate-host');\n          cssClasses.forEach(c => el.classList.add(c));\n          // Move each child from the original template to the new parent element.\n          el.append(...BaseComponent.children);\n          // Append the new parent element to the original parent element.\n          BaseComponent.appendChild(el);\n          /**\r\n           * Update the ChildComponent to be the\r\n           * newly created div in the event that one\r\n           * does not already exist.\r\n           */\n          ChildComponent = el;\n        }\n      }\n      /**\r\n       * Get the root of the app and\r\n       * add the overlay there.\r\n       */\n      const app = document.querySelector('ion-app') || document.body;\n      /**\r\n       * Create a placeholder comment so that\r\n       * we can return this component to where\r\n       * it was previously.\r\n       */\n      Reference = document.createComment('ionic teleport');\n      BaseComponent.parentNode.insertBefore(Reference, BaseComponent);\n      app.appendChild(BaseComponent);\n      /**\r\n       * We return the child component rather than the overlay\r\n       * reference itself since modal and popover will\r\n       * use this to wait for any Ionic components in the child view\r\n       * to be ready (i.e. componentOnReady) when using the\r\n       * lazy loaded component bundle.\r\n       *\r\n       * However, we fall back to returning BaseComponent\r\n       * in the event that a modal or popover is presented\r\n       * with no child content.\r\n       */\n      return ChildComponent !== null && ChildComponent !== void 0 ? ChildComponent : BaseComponent;\n    });\n    return function attachViewToDom(_x7, _x8) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  const removeViewFromDom = () => {\n    /**\r\n     * Return component to where it was previously in the DOM.\r\n     */\n    if (BaseComponent && Reference) {\n      Reference.parentNode.insertBefore(BaseComponent, Reference);\n      Reference.remove();\n    }\n    return Promise.resolve();\n  };\n  return {\n    attachViewToDom,\n    removeViewFromDom\n  };\n};\nexport { CoreDelegate as C, attachComponent as a, detachComponent as d };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}