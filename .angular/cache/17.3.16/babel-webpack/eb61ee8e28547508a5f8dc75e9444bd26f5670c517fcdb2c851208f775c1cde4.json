{"ast":null,"code":"// index.ts\nimport { clone } from \"@turf/clone\";\nimport { center } from \"@turf/center\";\nimport { centroid } from \"@turf/centroid\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { coordEach, featureEach } from \"@turf/meta\";\nimport { point, isObject } from \"@turf/helpers\";\nimport { getCoord, getCoords, getType } from \"@turf/invariant\";\nfunction transformScale(geojson, factor, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const origin = options.origin || \"centroid\";\n  const mutate = options.mutate || false;\n  if (!geojson) throw new Error(\"geojson required\");\n  if (typeof factor !== \"number\" || factor <= 0) throw new Error(\"invalid factor\");\n  const originIsPoint = Array.isArray(origin) || typeof origin === \"object\";\n  if (mutate !== true) geojson = clone(geojson);\n  if (geojson.type === \"FeatureCollection\" && !originIsPoint) {\n    featureEach(geojson, function (feature, index) {\n      geojson.features[index] = scale(feature, factor, origin);\n    });\n    return geojson;\n  }\n  return scale(geojson, factor, origin);\n}\nfunction scale(feature, factor, origin) {\n  const isPoint = getType(feature) === \"Point\";\n  const originCoord = defineOrigin(feature, origin);\n  if (factor === 1 || isPoint) return feature;\n  coordEach(feature, function (coord) {\n    const originalDistance = rhumbDistance(originCoord, coord);\n    const bearing = rhumbBearing(originCoord, coord);\n    const newDistance = originalDistance * factor;\n    const newCoord = getCoords(rhumbDestination(originCoord, newDistance, bearing));\n    coord[0] = newCoord[0];\n    coord[1] = newCoord[1];\n    if (coord.length === 3) coord[2] *= factor;\n  });\n  delete feature.bbox;\n  return feature;\n}\nfunction defineOrigin(geojson, origin) {\n  if (origin === void 0 || origin === null) origin = \"centroid\";\n  if (Array.isArray(origin) || typeof origin === \"object\") return getCoord(origin);\n  const bbox = geojson.bbox ? geojson.bbox : turfBBox(geojson, {\n    recompute: true\n  });\n  const west = bbox[0];\n  const south = bbox[1];\n  const east = bbox[2];\n  const north = bbox[3];\n  switch (origin) {\n    case \"sw\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"southwest\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"westsouth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"bottomleft\":\n      return point([west, south]);\n    case \"se\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"southeast\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"eastsouth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"bottomright\":\n      return point([east, south]);\n    case \"nw\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"northwest\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"westnorth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"topleft\":\n      return point([west, north]);\n    case \"ne\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"northeast\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"eastnorth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"topright\":\n      return point([east, north]);\n    case \"center\":\n      return center(geojson);\n    case void 0:\n    case null:\n    case \"centroid\":\n      return centroid(geojson);\n    default:\n      throw new Error(\"invalid origin\");\n  }\n}\nvar turf_transform_scale_default = transformScale;\nexport { turf_transform_scale_default as default, transformScale };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}