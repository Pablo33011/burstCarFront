{"ast":null,"code":"// index.ts\nimport { polygon as createPolygon, multiPolygon } from \"@turf/helpers\";\nimport * as polyclip from \"polyclip-ts\";\nimport { clone } from \"@turf/clone\";\nfunction mask(polygon, mask2, options) {\n  var _a;\n  const mutate = (_a = options == null ? void 0 : options.mutate) != null ? _a : false;\n  let maskTemplate = mask2;\n  if (mask2 && mutate === false) {\n    maskTemplate = clone(mask2);\n  }\n  const maskPolygon = createMask(maskTemplate);\n  let polygonOuters = null;\n  if (polygon.type === \"FeatureCollection\") {\n    polygonOuters = unionFc(polygon);\n  } else if (polygon.type === \"Feature\") {\n    polygonOuters = createGeomFromPolygonClippingOutput(polyclip.union(polygon.geometry.coordinates));\n  } else {\n    polygonOuters = createGeomFromPolygonClippingOutput(polyclip.union(polygon.coordinates));\n  }\n  polygonOuters.geometry.coordinates.forEach(function (contour) {\n    maskPolygon.geometry.coordinates.push(contour[0]);\n  });\n  return maskPolygon;\n}\nfunction unionFc(fc) {\n  const unioned = fc.features.length === 2 ? polyclip.union(fc.features[0].geometry.coordinates, fc.features[1].geometry.coordinates) : polyclip.union.apply(polyclip, fc.features.map(function (f) {\n    return f.geometry.coordinates;\n  }));\n  return createGeomFromPolygonClippingOutput(unioned);\n}\nfunction createGeomFromPolygonClippingOutput(unioned) {\n  return multiPolygon(unioned);\n}\nfunction createMask(mask2) {\n  const world = [[[180, 90], [-180, 90], [-180, -90], [180, -90], [180, 90]]];\n  let coordinates = world;\n  if (mask2) {\n    if (mask2.type === \"Feature\") {\n      coordinates = mask2.geometry.coordinates;\n    } else {\n      coordinates = mask2.coordinates;\n    }\n  }\n  return createPolygon(coordinates);\n}\nvar turf_mask_default = mask;\nexport { turf_mask_default as default, mask };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}