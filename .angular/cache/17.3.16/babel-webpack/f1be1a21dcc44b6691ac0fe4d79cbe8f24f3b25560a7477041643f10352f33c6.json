{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nconst watchForOptions = (containerEl, tagName, onChange) => {\n  if (typeof MutationObserver === 'undefined') {\n    return;\n  }\n  const mutation = new MutationObserver(mutationList => {\n    onChange(getSelectedOption(mutationList, tagName));\n  });\n  mutation.observe(containerEl, {\n    childList: true,\n    subtree: true\n  });\n  return mutation;\n};\nconst getSelectedOption = (mutationList, tagName) => {\n  let newOption;\n  mutationList.forEach(mut => {\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < mut.addedNodes.length; i++) {\n      newOption = findCheckedOption(mut.addedNodes[i], tagName) || newOption;\n    }\n  });\n  return newOption;\n};\n/**\r\n * The \"value\" key is only set on some components such as ion-select-option.\r\n * As a result, we create a default union type of HTMLElement and the \"value\" key.\r\n * However, implementers are required to provide the appropriate component type\r\n * such as HTMLIonSelectOptionElement.\r\n */\nconst findCheckedOption = (node, tagName) => {\n  /**\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n   * The above check ensures \"node\" is an Element (nodeType 1).\r\n   */\n  if (node.nodeType !== 1) {\n    return undefined;\n  }\n  // HTMLElement inherits from Element, so we cast \"el\" as T.\n  const el = node;\n  const options = el.tagName === tagName.toUpperCase() ? [el] : Array.from(el.querySelectorAll(tagName));\n  return options.find(o => o.value === el.value);\n};\nexport { watchForOptions as w };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}